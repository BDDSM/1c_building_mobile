
#Область ПрограммныйИнтерфейс

// Подключает обработчик локальных и push-уведомлений.
//
Процедура ПодключитьОбработкуДоставляемыхУведомлений() Экспорт

	#Если МобильноеПриложениеКлиент Тогда

	// Создаем описатель обработчика уведомлений
	Обработчик = Новый ОписаниеОповещения("ОбработчикДоставляемыхУведомлений", ЭтотОбъект);

	// Выполняем подключение обработчика
	ДоставляемыеУведомления.ПодключитьОбработчикУведомлений(Обработчик);

	#КонецЕсли

КонецПроцедуры 

// Обработчик локальных и push-уведомлений.
//
// Параметры:
//  Уведомление  - ЛокальноеУведомление - Обрабатываемое локальное или push-уведомление;
//  Локальное    - Булево - признак того, что уведомление локальное, Ложь - push-уведомление;
//  Показано     - Булево - признак того, что уведомление показано;
//  ДопПараметры - Произвольный - дополнительные параметры обработчика.
//
Процедура ОбработчикДоставляемыхУведомлений(Уведомление, Локальное, Показано, ДопПараметры) Экспорт

	#Если МобильноеПриложениеКлиент Тогда

	ДоставляемыеУведомления.УстановитьНаклейку(0);

	ОписаниеОбъекта = Уведомление.Данные;

	// Проверяем данные на наличие обязательного префикса
	Если СтрНайти(ОписаниеОбъекта, "Ref:") = 0 Тогда
		Возврат;
	КонецЕсли;

	// Удаляем префикс из описания
	ОписаниеОбъекта = СтрЗаменить(ОписаниеОбъекта, "Ref:", "");

	Позиция = СтрНайти(ОписаниеОбъекта, ";");
	Ссылка = Лев(ОписаниеОбъекта, Позиция - 1);
	ДатаСобытия = Дата(Сред(ОписаниеОбъекта, Позиция + 1));
	
	// Ищем позицию разделителя между именем метаданных и идентификатором
	Позиция = СтрНайти(Ссылка, "\");

	// Если разделитель не найден, то выходим из процедуры, т.к. скорее
	// всего структура данных уведомления не сможет быть обработана.
	Если Позиция = 0 Тогда
		Возврат;
	КонецЕсли;

	// Выделяем имя метаданных и идентификатор объекта
	ИмяМетаданных = Лев(Ссылка, Позиция - 1);
	Идентификатор = СокрЛП(Сред(Ссылка, Позиция + 1));

	// Получаем ссылку на объект уведомления
	Ссылка = ЛокальныеУведомленияВызовСервера.ПолучитьСсылку(ИмяМетаданных, Идентификатор);

	// Показываем объект уведомления
	Если Не Ссылка = Неопределено Тогда

		ПараметрыОбработчика = Новый Структура();
		ПараметрыОбработчика.Вставить("ИмяМетаданных", ИмяМетаданных);
		ПараметрыОбработчика.Вставить("Идентификатор", Идентификатор);
		ПараметрыОбработчика.Вставить("Ссылка", Ссылка);
		ПараметрыОбработчика.Вставить("Текст", Уведомление.Текст);

		ОбработкаРешения = 
			Новый ОписаниеОповещения(
				"ОбработкаРешенияПоказатьОбъектУведомления", 
				ЛокальныеУведомленияКлиент, ПараметрыОбработчика);

		ТекстВопроса = СтрШаблон(
			НСтр("ru = '%1
					|%2'; en = '%1
					|%2'"), Уведомление.Текст, 
			СформироватьТекстДатыУведомления(ДатаСобытия));

		КнопкиВыборка = Новый СписокЗначений();
		КнопкиВыборка.Добавить("Открыть" , НСтр("ru = 'Просмотреть'; en = 'View'"));
		КнопкиВыборка.Добавить("Отложить", НСтр("ru = 'Отложить на 15 мин.'; en = 'Postpone for 15 min.'"));
		КнопкиВыборка.Добавить("Закрыть" , НСтр("ru = 'Закрыть'; en = 'Close'"));

		ПоказатьВопрос(ОбработкаРешения, ТекстВопроса, КнопкиВыборка, , "Закрыть",);

	Иначе
		ОбновитьЛокальныеУведомленияНаУстройстве();
	КонецЕсли;

	#КонецЕсли

КонецПроцедуры

// Обрабатывает решение пользователя об обработке уведомления
//
// Параметры:
//  Решение		 - Строка - Решение пользователя;
//  ДопПараметры - Структура - Доп параметры вызовы метода.
//
Процедура ОбработкаРешенияПоказатьОбъектУведомления(Решение, ДопПараметры) Экспорт

	ЛокальныеУведомленияВызовСервера.УдалитьЗаписьСообщенияПоОбъекту(ДопПараметры.Ссылка);

	Если Решение = "Открыть" Тогда
		ОткрытьФормуОбъектаУведомления(ДопПараметры.ИмяМетаданных, ДопПараметры.Ссылка);

	ИначеЕсли Решение = "Отложить" Тогда
		ЛокальныеУведомленияВызовСервера.СформироватьЗаписьУведомленияПоОбъекту(
			ДопПараметры.Ссылка, ДопПараметры.Текст, ТекущаяДата() + 15 * 60, 0);

	КонецЕсли;

	ОбновитьЛокальныеУведомленияНаУстройстве();

КонецПроцедуры

// Пересоздает все локальные уведомления на устройстве.
//
Процедура ОбновитьЛокальныеУведомленияНаУстройстве() Экспорт

	Просроченных = 0;

	// Получаем сведения обо всех объекта требующих уведомления
	МассивДанных = ЛокальныеУведомленияВызовСервера.ПолучитьДанныеДляЛокальныхУведомления(Просроченных);

	#Если МобильноеПриложениеКлиент Тогда

	// Удаляем все локальные уведомления которые еще не показаны
	УдалитьВсеЛокальныеУведомленияНаКлиенте();

	// формируем уведомление для каждого объекта
	Для Каждого Запись Из МассивДанных Цикл

		ПоместитьУведомлениеВУстройство(
			СоздатьЛокальноеУведомление(Запись));

	КонецЦикла;

	#КонецЕсли

КонецПроцедуры

// Удаляет все локальные уведомления при выключении функции.
//
Процедура УдалитьВсеЛокальныеУведомленияНаКлиенте() Экспорт

	#Если МобильноеПриложениеКлиент Тогда

	ДоставляемыеУведомления.ОтменитьЛокальныеУведомления();
	ДоставляемыеУведомления.УстановитьНаклейку(0);

	#КонецЕсли

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Помещает новое доставляемое уведомление в систему;
//
// Параметры:
//  Уведомление - ДоставляемоеУведомление - Локальное уведомление которое будет показано на устройстве.
//
Процедура ПоместитьУведомлениеВУстройство(Уведомление = Неопределено)

	// Если уведомление не задано, то просто выходим.
	Если Уведомление = Неопределено Тогда
		Возврат;
	КонецЕсли;

	#Если МобильноеПриложениеКлиент Тогда

	// Помещаем уведомление в систему устройства
	ДоставляемыеУведомления.ДобавитьЛокальноеУведомление(Уведомление);

	#КонецЕсли

КонецПроцедуры

// Открывает форму объекта уведомления.
//
// Параметры:
//  ИмяМетаданных	 - Строка - имя метаданных объекта;
//  Ссылка			 - Ссылка - ссылка на объект уведомления.
//
Процедура ОткрытьФормуОбъектаУведомления(ИмяМетаданных, Ссылка)

	ПараметрыФормы = Новый Структура("Ключ", Ссылка);

	ИмяМетаданных = СокрЛП(ИмяМетаданных);

	Если ИмяМетаданных = "Задачи" Тогда

		Если ЭтоУстройствоСБольшимЭкраном() Тогда
			ОткрытьФорму("Справочник.Задачи.Форма.ФормаЗадачиПланшет", ПараметрыФормы);
		Иначе
			ОткрытьФорму("Справочник.Задачи.Форма.ФормаЗадачиТелефон", ПараметрыФормы);
		КонецЕсли;

	ИначеЕсли ИмяМетаданных = "ПроцессыИсполнение" Тогда

		Если ЭтоУстройствоСБольшимЭкраном() Тогда
			ОткрытьФорму("Справочник.ПроцессыИсполнение.Форма.ФормаПроцессаПланшет", ПараметрыФормы);
		Иначе
			ОткрытьФорму("Справочник.ПроцессыИсполнение.Форма.ФормаПроцессаТелефон", ПараметрыФормы);
		КонецЕсли;

	ИначеЕсли ИмяМетаданных = "ЗаписиРабочегоКалендаря" Тогда

		ОткрытьФорму("Справочник.ЗаписиРабочегоКалендаря.Форма.ФормаЭлемента", ПараметрыФормы);

	ИначеЕсли ИмяМетаданных = "Контроль" Тогда

		ОткрытьФорму("Справочник.Контроль.Форма.КарточкаКонтроляТелефон", ПараметрыФормы);

	ИначеЕсли ИмяМетаданных = "ВходящееПисьмо" Тогда

		ОткрытьФорму("Документ.ВходящееПисьмо.Форма.ФормаВходящего", ПараметрыФормы);

	ИначеЕсли ИмяМетаданных = "ИсходящееПисьмо" Тогда

		ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ФормаИсходящего", ПараметрыФормы);

	КонецЕсли;

КонецПроцедуры

// Формирует представление даты начала события для уведомления.
//
// Параметры:
//  Дата - Дата - Дата начала события;
// 
// Возвращаемое значение:
//  Строка - Представление даты.
//
Функция СформироватьТекстДатыУведомления(Дата) 

	Если НачалоДня(ТекущаяДата()) = НачалоДня(Дата) Тогда
		Представление = 
			СтрШаблон(
				НСтр("ru = 'Сегодня в %1'; en = 'Today at %1'"), Формат(Дата, "ДФ=HH:mm"));

	ИначеЕсли НачалоДня(ТекущаяДата())+86400 = НачалоДня(Дата) Тогда
		Представление = 
			СтрШаблон(
				НСтр("ru = 'Завтра в %1'; en = 'Tomorrow at %1'"), Формат(Дата, "ДФ=HH:mm"));

	Иначе
		Представление = 
			СтрШаблон(
				НСтр("ru = '%1 в %2'; en = '%1 at %2'"), 
				Формат(Дата, "ДФ='dd MMMM'"), Формат(Дата, "ДФ=HH:mm"));

	КонецЕсли;

	Возврат Представление;

КонецФункции

// Создает локальное уведомления на устройстве.
//
// Параметры:
//  Заголовок			 - Строка - Заголовок локального уведомления;
//  Текст				 - Строка - Текст локального уведомления;
//  ДатаСрабатывания	 - Дата - Дата показа локального уведомления;
//  Наклейка			 - Число - Число показываемое на значке приложения;
//  Данные				 - Строка - Данные об объекте уведомления;
//  ИнтервалПовторения	 - Число - Периодичность повтора уведомления;
//
// Возвращаемое значение:
//  ДоставляемоеУведомление - Созданное уведомление для помещение на устройство.
//
Функция СоздатьЛокальноеУведомление(ДанныеУведомления) 

	Уведомление = Неопределено;

	#Если МобильноеПриложениеКлиент Тогда

	// Проверяем дату предполагаемого показа
	Если Не ДанныеУведомления.ДатаВремяУведомления = '00010101' 
		И УниверсальноеВремя(ТекущаяДата()) >= ДанныеУведомления.ДатаВремяУведомления Тогда
		Возврат Уведомление;
	КонецЕсли;

	// Создаем новое локальное уведомление
	Уведомление = Новый ДоставляемоеУведомление;

	// Заполняем видимые пользователем свойства
	Уведомление.ДатаПоявленияУниверсальноеВремя = ДанныеУведомления.ДатаВремяУведомления;
	Уведомление.Заголовок = НСтр("ru = '1С:Стройка'");
	Уведомление.Текст     = ДанныеУведомления.Описание;
	Уведомление.Данные    = ДанныеУведомления.Данные;

	// Заполняем служебные данные уведомления
	Уведомление.Наклейка  = 0;
	Уведомление.ЗвуковоеОповещение = ЗвуковоеОповещение.ПоУмолчанию;
	Уведомление.ИнтервалПовтора = ДанныеУведомления.Интервал;

	#КонецЕсли

	Возврат Уведомление;

КонецФункции

#КонецОбласти