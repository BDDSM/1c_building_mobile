
#Область ПрограммныйИнтерфейс

// Инициирует запись команды подключения нового устройства в XML в зависимости от указанной версии.
//
// Параметры:
//  ЗаписьXML - ЗаписьXML - Объект записи данных XML;
//  Версия    - Строка - Желаемая версия формата данных.
//
Процедура ЗаписатьВXMLКомандуПодключенияУстройства(ЗаписьXML, Версия) Экспорт
	
	ВыгрузитьСообщениеДляПодключенияУстройства(ЗаписьXML, Версия);
	
КонецПроцедуры

// Инициирует запись команды отключения устройства в XML в зависимости от указанной версии.
//
// Параметры:
//  ЗаписьXML - ЗаписьXML - Объект записи данных XML;
//  Версия    - Строка - Желаемая версия формата данных.
//
Процедура ЗаписатьВXMLКомандуОтключенияУстройства(ЗаписьXML, Версия) Экспорт

	Если Версия >= "206" Тогда
		ВыгрузитьСообщениеДляОтключенияУстройстваПоВерсии206(ЗаписьXML, Версия);
	КонецЕсли;

КонецПроцедуры

// Инициирует запись запроса файла с сервера в XML в зависимости от указанной версии.
//
// Параметры:
//  ЗаписьXML  - ЗаписьXML - Объект записи данных XML;
//  Версия     - Строка - Желаемая версия формата данных;
//  ФайлСсылка - СправочникСсылка.Файлы - Ссылка на запрашиваемый файл.
//
Процедура ЗаписатьВXMLКомандуПолученияОдногоФайла(ЗаписьXML, Версия, ФайлСсылка) Экспорт

	Если Версия >= "206" Тогда
		ВыгрузитьСообщениеДляПолученияОдногоФайлаПоВерсии206(ЗаписьXML, Версия, ФайлСсылка);
	КонецЕсли;

КонецПроцедуры

// Инициирует запись данных информации о клиентском устройстве в XML в зависимости от указанной версии.
//
// Параметры:
//  ЗаписьXML - ЗаписьXML - Объект записи данных XML;
//  Версия    - Строка - Желаемая версия формата данных.
//
Процедура ЗаписатьВXMLИнформациюОКлиенте(ЗаписьXML, Версия) Экспорт

	ВыгрузитьИнформациюОКлиентеПоВерсии206(ЗаписьXML);

КонецПроцедуры

// Записывает указанный объект в виде XML для передачи на сервер.
//
// Параметры:
//  ЗаписьXML     - ЗаписьXML - Объект записи данных XML;
//  ВерсияСервиса - Строка - Желаемая версия формата данных;
//  Объект        - Произвольный - Объект, передаваемый на сервер (Ссылка или НаборЗаписей).
//
Процедура ЗаписатьОбъектВXML(ЗаписьXML, ВерсияСервиса, Объект) Экспорт

	Если ТипЗнч(Объект) = Тип("УдалениеОбъекта") Тогда

		ЗаписатьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервиса, Объект);

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.АдресатыПочтовыхСообщений") Тогда

		ЗаписатьВXMLАдресата(ЗаписьXML, ВерсияСервиса, Объект.Ссылка);

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ЗаписиРабочегоКалендаря") Тогда

		ЗаписатьВXMLЗаписьРабочегоКалендаря(ЗаписьXML, ВерсияСервиса, Объект.Ссылка);

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.Контроль") Тогда

		ЗаписатьВXMLКонтрольнуюКарточку(ЗаписьXML, ВерсияСервиса, Объект.Ссылка);

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ПроцессыИсполнение") Тогда

		ЗаписатьВXMLПроцессИсполнение(ЗаписьXML, ВерсияСервиса, Объект.Ссылка);

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.Файлы") Тогда

		ЗаписатьВXMLФайл(ЗаписьXML, ВерсияСервиса, Объект.Ссылка);

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ШаблоныТекстовПисем") Тогда

		ЗаписатьВXMLШаблоныТекстов(ЗаписьXML, ВерсияСервиса, Объект.Ссылка);

	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ИсходящееПисьмо") Тогда

		ЗаписатьВXMLИсходящееПисьмо(ЗаписьXML, ВерсияСервиса, Объект.Ссылка);

	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.ЗадачиПринятыеНаИсполнение") Тогда

		Для Каждого Запись Из Объект Цикл
			ЗаписатьВXMLПринятиеЗадачиНаИсполнение(ЗаписьXML, ВерсияСервиса, Запись);
		КонецЦикла;

	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.ИзмененныеНастройкиСинхронизации") Тогда

		Для Каждого Запись Из Объект Цикл

			Если Запись.ВидНастройки = Перечисления.ВидыНастроекОбмена.СинхронизацияПапокПисем Тогда
				ЗаписатьВXMLНастройкуСинхронизацииПапокПисем(ЗаписьXML, ВерсияСервиса);

			ИначеЕсли Запись.ВидНастройки = Перечисления.ВидыНастроекОбмена.СрокУстареванияДанных Тогда
				ЗаписатьВXMLНастройкуСрокаУстаревания(ЗаписьXML, ВерсияСервиса);

			ИначеЕсли Запись.ВидНастройки = Перечисления.ВидыНастроекОбмена.МаксимальныйРазмерФайла Тогда
				ЗаписатьВXMLНастройкуМаксРазмераФайла(ЗаписьXML, ВерсияСервиса);

			ИначеЕсли Запись.ВидНастройки = Перечисления.ВидыНастроекОбмена.ШаблоныТекстовПисем Тогда
				ЗаписатьВXMLНастройкиШаблоновПисем(ЗаписьXML, ВерсияСервиса);

			КонецЕсли;

		КонецЦикла;

	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.ПапкиОбъектов") Тогда

		Для Каждого Запись Из Объект Цикл
			ЗаписатьВXMLЗаписьПапкиОбъекта(ЗаписьXML, ВерсияСервиса, Запись);
		КонецЦикла;

	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.ПеренаправлениеЗадач") Тогда

		Для Каждого Запись Из Объект Цикл
			ЗаписатьВXMLПеренаправлениеЗадачи(ЗаписьXML, ВерсияСервиса, Запись);
		КонецЦикла;

	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.ПротоколСобытий") Тогда

		Для Каждого Запись Из Объект Цикл
			ЗаписатьВXMLЗаписьПротоколаСобытий(ЗаписьXML, ВерсияСервиса, Запись);
		КонецЦикла;

	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.РезультатыВыполненияЗадач") Тогда

		Для Каждого Запись Из Объект Цикл
			ЗаписатьВXMLРезультатыВыполненияЗадачи(ЗаписьXML, ВерсияСервиса, Запись);
		КонецЦикла;

	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.СведенияОПрочтенииОбъектов") Тогда

		Для Каждого Запись Из Объект Цикл
			ЗаписатьВXMLЗаписьОПрочтенииОбъекта(ЗаписьXML, ВерсияСервиса, Запись);
		КонецЦикла;

	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.ФлагиОбъектов") Тогда

		Для Каждого Запись Из Объект Цикл
			ЗаписатьВXMLФлагОбъекта(ЗаписьXML, ВерсияСервиса, Запись);
		КонецЦикла;

	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.СостоянияПроцессов") Тогда

		Для Каждого Запись Из Объект Цикл
			ЗаписатьВXMLЗаписьСостоянияПроцессов(ЗаписьXML, ВерсияСервиса, Запись);
		КонецЦикла;

	Иначе

		Описание = СтрШаблон(
			НСтр("ru = 'Пропущен объект (%1, %2)'; en = 'object skipped (%1, %2)'"), 
			ТипЗнч(Объект),
			Строка(Объект));

		РегистрыСведений.ПротоколСобытий.ДобавитьПредупреждение(Описание);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура - Записать заголовок элемента данных.
//
// Параметры:
//  ЗаписьXML       - ЗаписьXML - Объект записи;
//  ИмяТипаОбъекта  - Строка - Строковое представление типа выгружаемого объекта;
//  ВерсияФормата   - Строка - Использованная при выгрузке версия формата.
//
Процедура ЗаписатьЗаголовокОбъекта(ЗаписьXML, ИмяТипаОбъекта, ВерсияФормата) Экспорт

	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяТипаОбъекта);
	ЗаписьXML.ЗаписатьАтрибут("Version", ВерсияФормата);

КонецПроцедуры

// Выполняет проверку, получение и запись идентификатора объекта.
//
// Параметры:
//  ЗаписьXML        - ЗаписьXML - Объект записи;
//  ИмяЭлемента		 - Строка - Имя записываемого элемента;
//  ЗначениеЭлемента - Ссылка - Ссылка на объект выгружаемый на сервер.
//
Процедура ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, ИмяЭлемента, ЗначениеЭлемента)

	Если Не ЗначениеЗаполнено(ЗначениеЭлемента) Тогда
		Возврат;
	КонецЕсли;

	УИД = ЗначениеЭлемента.УникальныйИдентификатор();

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, ИмяЭлемента, УИД);

КонецПроцедуры

// Записывает значение элемента данных в поток XML.
//
// Параметры:
//  ЗаписьXML				   - ЗаписьXML - Объект записи;
//  ИмяЭлемента				   - Строка - имя типа выгружаемого элемента;
//  ЗначениеЭлемента		   - Произвольный - выгружаемый объект;
//  УдалитьНедопустимыеСимволы - Булево - Признак, что для выгружаемого значения нужно удалить недопустимые символы.
//
Процедура ЗаписатьЭлементОбъектаДанных(ЗаписьXML, ИмяЭлемента, ЗначениеЭлемента) Экспорт

	Если Не ЗначениеЗаполнено(ЗначениеЭлемента) Тогда
		Возврат;
	КонецЕсли;

	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(ЗначениеЭлемента));
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

// Выгружает XML представление ссылки на объект.
//
// Параметры:
//  ВерсияКлиента	- Строка - Версия формата запрошенная клиентом;
//  ЭлементДанных	- ДокументСсылка.ВходящееПисьмо - Выгружаемый элемент данных.
// 
// Возвращаемое значение:
//  Строка - XML представление ссылки на объект.
//
Процедура ЗаписатьСсылкуНаЭлементДанных(ЗаписьXML, ИмяЭлемента, ЭлементДанных)

	Если Не ЗначениеЗаполнено(ЭлементДанных) Тогда
		Возврат;
	КонецЕсли;

	// Записываем в поток открывающий тег
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);

	// Записываем данные 
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Type", 
		ОбменВызовСервераПовтИсп.ПолучитьПредставлениеТипаПоСсылке(ЭлементДанных));

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "ID", ЭлементДанных);

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

#КонецОбласти

#Область ОбработкаКоманд

Процедура ВыгрузитьСообщениеДляПодключенияУстройства(ЗаписьXML, Версия)

	// Записываем данные в пакет
	ЗаписатьВXMLНастройкуСрокаУстаревания(ЗаписьXML, Версия);
	ЗаписатьВXMLНастройкуМаксРазмераФайла(ЗаписьXML, Версия);

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "Connect", "001");

	// Записываем данные в пакет
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "ClientCode", Константы.КодУстройства.Получить());
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "InitialPeriod", Константы.ПериодПервичнойЗагрузкиДанных.Получить());

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписатьВXMLИнформациюОКлиенте(ЗаписьXML, Версия);

КонецПроцедуры

Процедура ВыгрузитьСообщениеДляОтключенияУстройстваПоВерсии206(ЗаписьXML, Версия)

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "Disconnect", "206");

	// Записываем данные 
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Client", Константы.КодУстройства.Получить());

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

Процедура ВыгрузитьСообщениеДляПолученияОдногоФайлаПоВерсии206(ЗаписьXML, Версия, ФайлСсылка)

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "GetFile", "206");

	// Записываем данные 
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "ID", ФайлСсылка);

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииВыгрузкиДанных

#Область ИнформацияОКлиенте

Процедура ВыгрузитьИнформациюОКлиентеПоВерсии206(ЗаписьXML)

	СистемнаяИнформация = Новый СистемнаяИнформация;

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "ClientInfo", "206");

	// Записываем данные 
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "AppVersion", 
		Константы.ВерсияАренды.Получить());

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "OS", 
		ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(СистемнаяИнформация.ВерсияОС));

	РазмерПамяти = СистемнаяИнформация.ОперативнаяПамять;
	РазмерПамяти = ?(РазмерПамяти = 0, 64, РазмерПамяти);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "RAM", РазмерПамяти);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "DeviceName", 
		ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(ИмяКомпьютера()));

	РазмерЭкрана = ЭкранКлиентСервер.ДиагональЭкрана();
	РазмерЭкрана = ?(ЗначениеЗаполнено(РазмерЭкрана), РазмерЭкрана, 4);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "ScreenSize", 
		Формат(РазмерЭкрана,"ЧЦ=3; ЧДЦ=1; ЧРД=.; ЧГ="));

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента(); 

КонецПроцедуры

#КонецОбласти

#Область УдалениеОбъекта

// Определяет какую версию объекта нужно использовать для удаления объекта.
//
// Параметры:
//  ЗаписьXML		 - ЗаписьXML - Объект записи XML файла;
//  ВерсияСервиса	 - Строка - Версия протокола обмена заявленная клиентом;
//  ЭлементДанных	 - Ссылка, Набор, УдалениеОбъекта - Элемент выгружаемых данных.
//
Процедура ЗаписатьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервиса, ЭлементДанных)

	// Выбираем версию выгрузки в зависимости от используемой версии клиента
	Если ВерсияСервиса >= "206" Тогда
		ВыгрузитьУдалениеОбъектаДляВерсии206(ЗаписьXML, ЭлементДанных);
	КонецЕсли;

КонецПроцедуры

// Выгружает входящее письмо в терминах версии 206.
//
// Параметры:
//  ЗаписьXML		 - ЗаписьXML - Объект записи XML файла;
//  ЭлементДанных	 - Ссылка, Набор, УдалениеОбъекта - Элемент выгружаемых данных.
//
Процедура ВыгрузитьУдалениеОбъектаДляВерсии206(ЗаписьXML, ЭлементДанных)

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "ObjectDeletion", "206");

	// Записываем данные 
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Type", 
		ОбменВызовСервераПовтИсп.ПолучитьПредставлениеТипаПоСсылке(ЭлементДанных.Ссылка));

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "ID", ЭлементДанных.Ссылка);

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

#КонецОбласти


#Область АдресатыПочтовыхСообщений

Процедура ЗаписатьВXMLАдресата(ЗаписьXML, ВерсияСервиса, ЭлементДанных)

	Если ВерсияСервиса >= "206" Тогда
		ВыгрузитьАдресатаПоВерсии206(ЗаписьXML, ЭлементДанных);
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьАдресатаПоВерсии206(ЗаписьXML, ЭлементДанных)

	ЗначенияРеквизитов = ОбщегоНазначенияВызовСервера.ЗначенияРеквизитовОбъекта(ЭлементДанных, 
		"Ссылка,Наименование,Адрес");

	Если Не ЗначениеЗаполнено(ЗначенияРеквизитов.Ссылка) Тогда
		Возврат;
	КонецЕсли;

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "Addressee", "206");

	// Записываем данные 
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "ID", ЗначенияРеквизитов.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Presentation", 
		ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(ЗначенияРеквизитов.Наименование));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Address", 
		ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(ЗначенияРеквизитов.Адрес));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "PhoneNumbers", "");

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

#КонецОбласти 

#Область ЗаписиРабочегоКалендаря

Процедура ЗаписатьВXMLЗаписьРабочегоКалендаря(ЗаписьXML, ВерсияСервиса, ЭлементДанных)

	Если ВерсияСервиса >= "206" Тогда
		ВыгрузитьЗаписьРабочегоКалендаряПоВерсии206(ЗаписьXML, ЭлементДанных);
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьЗаписьРабочегоКалендаряПоВерсии206(ЗаписьXML, ЭлементДанных)

	ЗначенияРеквизитов = ОбщегоНазначенияВызовСервера.ЗначенияРеквизитовОбъекта(ЭлементДанных, 
		"Ссылка,ВерсияДанныхНаСервере,Описание,ВесьДень,ДатаНачала,ДатаОкончания,Цвет,Состояние,
		|ТипЗаписиКалендаря,ДатаНачалаПовторения,ДатаОкончанияПовторения,ИнтервалПовторения,
		|ПовторениеПоДнямМесяца,ПовторениеПоМесяцам,КоличествоПовторов,ЧастотаПовторения,
		|ПравилоОкончанияПовторения,ПовторениеПоДням,ИсключенияПовторения,Отработано,Предмет,Связанная");

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "CalendarEvent", "206");
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "ID", ЗначенияРеквизитов.Ссылка);

	// Записываем данные 
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "DataVersion", ЗначенияРеквизитов.ВерсияДанныхНаСервере);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Description", 
		ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(ЗначенияРеквизитов.Описание));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "DayLong", ЗначенияРеквизитов.ВесьДень);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "StartDate", ЗначенияРеквизитов.ДатаНачала);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "EndDate", ЗначенияРеквизитов.ДатаОкончания);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Color", 
		ОбменВызовСервераПовтИсп.ПолучитьПредставлениеЦвета(ЗначенияРеквизитов.Цвет));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Status", 
		ОбменВызовСервераПовтИсп.ПолучитьПредставлениеСостоянияЗаписиРабочегоКалендаря(
			ЗначенияРеквизитов.Состояние));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Type", 
		ОбменВызовСервераПовтИсп.ПолучитьПредставлениеТипаЗаписиКалендаря(ЗначенияРеквизитов.ТипЗаписиКалендаря));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "IsDone", ЗначенияРеквизитов.Отработано);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Linked", ЗначенияРеквизитов.Связанная);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXML, "Target", ЗначенияРеквизитов.Предмет);

	Если ЗначенияРеквизитов.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда

		ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "RecurrenceStartDate", ЗначенияРеквизитов.ДатаНачалаПовторения);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "RecurrenceEndDate", ЗначенияРеквизитов.ДатаОкончанияПовторения);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Interval", ЗначенияРеквизитов.ИнтервалПовторения);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "ByMonthDay", ЗначенияРеквизитов.ПовторениеПоДнямМесяца);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "ByMonth", ЗначенияРеквизитов.ПовторениеПоМесяцам);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Count", ЗначенияРеквизитов.КоличествоПовторов);

		ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Frequency", 
			ОбменВызовСервераПовтИсп.ПолучитьПредставлениеЧастотыПовторений(ЗначенияРеквизитов.ЧастотаПовторения));

		ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "EndRule", 
			ОбменВызовСервераПовтИсп.ПолучитьПредставлениеПравилаОкончанияПовторения(
				ЗначенияРеквизитов.ПравилоОкончанияПовторения));

		ЗаписьXML.ЗаписатьНачалоЭлемента("RecurrenceDays");
		ДниПовторения = ЗначенияРеквизитов.ПовторениеПоДням.Выбрать();
		Пока ДниПовторения.Следующий() Цикл

			ЗаписьXML.ЗаписатьНачалоЭлемента("RecurrenceDay");

			ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Day", ДниПовторения.ДеньНедели);
			ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Occurrence", ДниПовторения.НомерВхождения);

			ЗаписьXML.ЗаписатьКонецЭлемента();

		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента(); // RecurrenceDays

		ЗаписьXML.ЗаписатьНачалоЭлемента("RecurrenceExceptions");
		ИсключениеПовторения = ЗначенияРеквизитов.ИсключенияПовторения.Выбрать();
		Пока ИсключениеПовторения.Следующий() Цикл

			ЗаписьXML.ЗаписатьНачалоЭлемента("RecurrenceException");

			ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "ID", ИсключениеПовторения.ЗаписьИсключения);
			ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Date", ИсключениеПовторения.ДатаИсключения);

			ЗаписьXML.ЗаписатьКонецЭлемента();

		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента(); // RecurrenceExceptions

	КонецЕсли;

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента(); // CalendarEvent

КонецПроцедуры

#КонецОбласти

#Область Контроль

Процедура ЗаписатьВXMLКонтрольнуюКарточку(ЗаписьXML, ВерсияСервиса, ЭлементДанных)

	Если ВерсияСервиса >= "206" Тогда
		ВыгрузитьКонтрольнуюКарточкуПоВерсии206(ЗаписьXML, ЭлементДанных);
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьКонтрольнуюКарточкуПоВерсии206(ЗаписьXML, ЭлементДанных)

	ЗначенияРеквизитов = ОбщегоНазначенияВызовСервера.ЗначенияРеквизитовОбъекта(ЭлементДанных, 
		"Ссылка,ВерсияДанныхНаСервере,Наименование,Описание,Автор,ДатаПостановкиНаКонтроль,
		|ДатаСнятияСКонтроля,ПоставленНаКонтроль,СнятСКонтроля,СрокИсполнения,Контролер,Источник,
		|Предмет,Исполнители");

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "Control", "206");

	// Записываем данные 
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "ID", ЗначенияРеквизитов.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "DataVersion", ЗначенияРеквизитов.ВерсияДанныхНаСервере);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Name", 
		ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(ЗначенияРеквизитов.Наименование));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Description", 
		ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(ЗначенияРеквизитов.Описание));

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "Author", ЗначенияРеквизитов.Автор);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "ControlStartDate", ЗначенияРеквизитов.ДатаПостановкиНаКонтроль);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "ControlEndDate", ЗначенияРеквизитов.ДатаСнятияСКонтроля);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Active", ЗначенияРеквизитов.ПоставленНаКонтроль);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Deactivated", ЗначенияРеквизитов.СнятСКонтроля);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "DeadLine", ЗначенияРеквизитов.СрокИсполнения);

	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXML, "Controller", ЗначенияРеквизитов.Контролер);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXML, "Source", ЗначенияРеквизитов.Источник);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXML, "Target", ЗначенияРеквизитов.Предмет);

	ЗаписьXML.ЗаписатьНачалоЭлемента("ControlPerformers");
	Исполнитель = ЗначенияРеквизитов.Исполнители.Выбрать();
	Пока Исполнитель.Следующий() Цикл

		ЗаписьXML.ЗаписатьНачалоЭлемента("ControlPerformer");

		ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Main", Исполнитель.Ответственный);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "TaskIsExecuted", Исполнитель.Исполнено);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "TaskExecutionDate", Исполнитель.ДатаИсполнения);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "ControlEndDate", Исполнитель.ДатаКонтроля);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "TaskControlled", Исполнитель.Проконтролировано);

		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXML, "Performer", Исполнитель.Исполнитель);
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXML, "Source", Исполнитель.Источник);
		
		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ControlPerformers

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента(); // Control

КонецПроцедуры

#КонецОбласти

#Область ПроцессИсполнение

Процедура ЗаписатьВXMLПроцессИсполнение(ЗаписьXML, ВерсияКлиента, ЭлементДанных)

	Если ВерсияКлиента >= "214" Тогда
		ВыгрузитьПроцессИсполнениеПоВерсии214(ЗаписьXML, ЭлементДанных);
	ИначеЕсли ВерсияКлиента >= "206" Тогда
		ВыгрузитьПроцессИсполнениеПоВерсии206(ЗаписьXML, ЭлементДанных);
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьПроцессИсполнениеПоВерсии206(ЗаписьXML, ЭлементДанных)

	ЗначенияРеквизитов = ОбщегоНазначенияВызовСервера.ЗначенияРеквизитовОбъекта(ЭлементДанных, 
		"Ссылка,ВерсияДанныхНаСервере,Наименование,Описание,Срок,Важность,ДатаСоздания,ДатаСтарта,
		|ДатаЗавершения,ГлавнаяЗадача,Состояние,Исполнители");
	
	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "ExecutionProcess", "206");

	// Записываем данные 
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "ID", ЗначенияРеквизитов.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "DataVersion", ЗначенияРеквизитов.ВерсияДанныхНаСервере);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Description", 
		ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(ЗначенияРеквизитов.Описание));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Name", 
		ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(ЗначенияРеквизитов.Наименование));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "DeadLine", ЗначенияРеквизитов.Срок);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Importance", 
		ОбменВызовСервераПовтИсп.ПолучитьПредставлениеВажностиЗадачи(ЗначенияРеквизитов.Важность));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "CreationDate", ЗначенияРеквизитов.ДатаСоздания);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "StartDate", ЗначенияРеквизитов.ДатаСтарта);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "EndDate", ЗначенияРеквизитов.ДатаЗавершения);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "ExecutionHistory", "");
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "MainTask", ЗначенияРеквизитов.ГлавнаяЗадача);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "State", 
		ОбменВызовСервераПовтИсп.ПолучитьПредставлениеСостоянияБизнесПроцесса(
			ЗначенияРеквизитов.Состояние));

	ЗаписьXML.ЗаписатьНачалоЭлемента("ExecutionPerformers");
	Исполнитель = ЗначенияРеквизитов.Исполнители.Выбрать();
	Пока Исполнитель.Следующий() Цикл

		ЗаписьXML.ЗаписатьНачалоЭлемента("ExecutionPerformer");

		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXML, "Performer", Исполнитель.Исполнитель);

		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ControlPerformers

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ExecutionProcess

	ЗаписатьВXMLФайлыОбъекта(ЗаписьXML, "206", ЗначенияРеквизитов.Ссылка);

КонецПроцедуры

Процедура ВыгрузитьПроцессИсполнениеПоВерсии214(ЗаписьXML, ЭлементДанных)

	ЗначенияРеквизитов = ОбщегоНазначенияВызовСервера.ЗначенияРеквизитовОбъекта(ЭлементДанных, 
		"Ссылка,ВерсияДанныхНаСервере,Наименование,Описание,Срок,Важность,ДатаСоздания,ДатаСтарта,
		|ДатаЗавершения,ГлавнаяЗадача,Состояние,Исполнители");

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "ExecutionProcess", "214");

	// Записываем данные 
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "ID", ЗначенияРеквизитов.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "DataVersion", 
		ЗначенияРеквизитов.ВерсияДанныхНаСервере);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Description", 
		ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(ЗначенияРеквизитов.Описание));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Name", 
		ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(ЗначенияРеквизитов.Наименование));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "DeadLine", ЗначенияРеквизитов.Срок);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Importance", 
		ОбменВызовСервераПовтИсп.ПолучитьПредставлениеВажностиЗадачи(ЗначенияРеквизитов.Важность));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "CreationDate", 
		ЗначенияРеквизитов.ДатаСоздания);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "StartDate", 
		ЗначенияРеквизитов.ДатаСтарта);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "EndDate", 
		ЗначенияРеквизитов.ДатаЗавершения);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "ExecutionHistory", "");
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "MainTask", 
		ЗначенияРеквизитов.ГлавнаяЗадача);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "State", 
		ОбменВызовСервераПовтИсп.ПолучитьПредставлениеСостоянияБизнесПроцесса(
			ЗначенияРеквизитов.Состояние));

	ЗаписьXML.ЗаписатьНачалоЭлемента("ExecutionPerformers");
	Исполнители = ЗначенияРеквизитов.Исполнители.Выбрать();
	Пока Исполнители.Следующий() Цикл

		ЗаписьXML.ЗаписатьНачалоЭлемента("ExecutionPerformer");

		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXML, "Performer", 
			Исполнители.Исполнитель);

		ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "ID", 
			Исполнители.ИдентификаторИсполнителя);

		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ExecutionPerformers

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ExecutionProcess

	ЗаписатьВXMLФайлыОбъекта(ЗаписьXML, "206", ЗначенияРеквизитов.Ссылка);

КонецПроцедуры

#КонецОбласти

#Область Файлы

Процедура ЗаписатьВXMLФайлыОбъекта(ЗаписьXML, ВерсияСервиса, ЭлементДанных)

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ВладелецФайла", ЭлементДанных.Ссылка);

	ВыборкаФайлы = Справочники.Файлы.Выбрать(,, СтруктураОтбора);

	Пока ВыборкаФайлы.Следующий() Цикл
		ЗаписатьВXMLФайл(ЗаписьXML, ВерсияСервиса, ВыборкаФайлы.Ссылка, Истина);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаписатьВXMLФайл(ЗаписьXML, ВерсияСервиса, ЭлементДанных, ЭтоВложение = Ложь)

	Если ВерсияСервиса >= "206" Тогда
		ВыгрузитьФайлПоВерсии206(ЗаписьXML, ЭлементДанных, ЭтоВложение);
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьФайлПоВерсии206(ЗаписьXML, ЭлементДанных, ЭтоВложение = Ложь)

	// Выполним проверки и подготовку данных
	ЗначенияРеквизитов = ОбщегоНазначенияВызовСервера.ЗначенияРеквизитовОбъекта(ЭлементДанных, 
		"Ссылка,Наименование,Тип,ТолькоЗаголовок,Данные,Размер,ВладелецФайла,ФайлОснование");

	// Для задач файлы могут выгружаться индивидуально.
	// для писем и процессов исполнение - только как вложения.
	Если Не ЭтоВложение 
		И ТипЗнч(ЗначенияРеквизитов.ВладелецФайла) = Тип("СправочникСсылка.Задачи") Тогда
		ТипВладельца = "Task";

	ИначеЕсли ЭтоВложение
		И ТипЗнч(ЗначенияРеквизитов.ВладелецФайла) = Тип("СправочникСсылка.ПроцессыИсполнение") Тогда
			ТипВладельца = "ExecutionProcess";

	ИначеЕсли ЭтоВложение
		И ТипЗнч(ЗначенияРеквизитов.ВладелецФайла) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
		ТипВладельца = "IncomingMail";
		
	ИначеЕсли ЭтоВложение
		И ТипЗнч(ЗначенияРеквизитов.ВладелецФайла) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		ТипВладельца = "OutgoingMail";

	Иначе
		Возврат;
	КонецЕсли;

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "File", "206");

	// Записываем данные 
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "ID", ЗначенияРеквизитов.Ссылка);

	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXML, "Owner", ЗначенияРеквизитов.ВладелецФайла);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Name", 
		ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(ЗначенияРеквизитов.Наименование));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Extension", 
		ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(ЗначенияРеквизитов.Тип));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Size", ЗначенияРеквизитов.Размер);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "HeaderOnly", ЗначенияРеквизитов.ТолькоЗаголовок);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "FileData", ЗначенияРеквизитов.Данные);

	Если ЗначениеЗаполнено(ЗначенияРеквизитов.ФайлОснование) Тогда
		ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "BaseFileID", ЗначенияРеквизитов.ФайлОснование);
	КонецЕсли;

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента(); // File

КонецПроцедуры

#КонецОбласти

#Область ШаблоныТекстовПисем

Процедура ЗаписатьВXMLШаблоныТекстов(ЗаписьXML, ВерсияКлиента, ЭлементДанных)

	Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьШаблоныТекстовПоВерсии206(ЗаписьXML, ЭлементДанных);
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьШаблоныТекстовПоВерсии206(ЗаписьXML, ЭлементДанных)

	ЗначенияРеквизитов = ОбщегоНазначенияВызовСервера.ЗначенияРеквизитовОбъекта(ЭлементДанных, 
		"Ссылка,ВерсияДанныхНаСервере,Наименование,Шаблон");

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "MailTextTemplate", "206");

	// Записываем данные 
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "ID", ЭлементДанных.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "DataVersion", ЭлементДанных.ВерсияДанныхНаСервере);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Presentation", ЭлементДанных.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Text", 
		ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(ЭлементДанных.Шаблон));

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

#КонецОбласти


#Область ИсходящееПисьмо

Процедура ЗаписатьВXMLИсходящееПисьмо(ЗаписьXML, ВерсияКлиента, ЭлементДанных)

	Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьИсходящееПисьмоПоВерсии206(ЗаписьXML, ЭлементДанных);
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьИсходящееПисьмоПоВерсии206(ЗаписьXML, ЭлементДанных)

	// Выполним проверки и подготовку данных
	ЗначенияРеквизитов = ОбщегоНазначенияВызовСервера.ЗначенияРеквизитовОбъекта(ЭлементДанных, 
		"Ссылка,ВерсияДанныхНаСервере,ПодготовленоКОтправке,ПометкаУдаления,ТекстХранилище,
		|Тема,Дата,Прочитан,Важность,Папка,УчетнаяЗапись,ИндексСостоянияПисьма,ПисьмоОснование,
		|ПолучателиКопий,ПолучателиПисьма,ПолучателиСкрытыхКопий");

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ВладелецФайла", ЗначенияРеквизитов.Ссылка);

	ВыборкаФайлы = Справочники.Файлы.Выбрать(,, СтруктураОтбора);


	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "OutgoingMail", "206");

	// Записываем данные 
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "ID", ЗначенияРеквизитов.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "DataVersion", ЗначенияРеквизитов.ВерсияДанныхНаСервере);

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "Folder", ЗначенияРеквизитов.Папка);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "Account", ЗначенияРеквизитов.УчетнаяЗапись);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Subject", 
		ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(ЗначенияРеквизитов.Тема));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Importance", 
		ОбщегоНазначенияВызовСервера.ИмяЗначенияПеречисления(ЗначенияРеквизитов.Важность));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "CreationDate", ЗначенияРеквизитов.Дата);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "ReadyToBeSent", ЗначенияРеквизитов.ПодготовленоКОтправке);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "MarkedForDeletion", ЗначенияРеквизитов.ПометкаУдаления);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Body", ЗначенияРеквизитов.ТекстХранилище);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "WasSent", Ложь);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "WasRead", ЗначенияРеквизитов.Прочитан);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "WasAnswered", 
		ЗначенияРеквизитов.ИндексСостоянияПисьма = 1);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "WasForwarded", 
		ЗначенияРеквизитов.ИндексСостоянияПисьма = 2 Или ЭлементДанных.ИндексСостоянияПисьма = 3);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "HasAnswer", 
		ЗначенияРеквизитов.ИндексСостоянияПисьма = 4);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "HasAttachment", ВыборкаФайлы.Следующий());

	Если ЗначениеЗаполнено(ЭлементДанных.ПисьмоОснование) Тогда

		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXML, "BaseMail", ЭлементДанных.ПисьмоОснование);

		ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "AnswerType", 
			ОбщегоНазначенияВызовСервера.ИмяЗначенияПеречисления(ЭлементДанных.ТипОтвета));

	КонецЕсли;

	ЗаписатьЭлементОбъектаДанных(
		ЗаписьXML, "TO",  ЗначенияРеквизитов.ПолучателиПисьма);

	ЗаписатьЭлементОбъектаДанных(
		ЗаписьXML, "CC",  ЗначенияРеквизитов.ПолучателиКопий);

	ЗаписатьЭлементОбъектаДанных(
		ЗаписьXML, "BCC", ЗначенияРеквизитов.ПолучателиСкрытыхКопий);

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента(); // OutgoingMail

	ЗаписатьВXMLФайлыОбъекта(ЗаписьXML, "206", ЭлементДанных.Ссылка);

КонецПроцедуры

#КонецОбласти


#Область ЗадачиПринятыеНаИсполнение

Процедура ЗаписатьВXMLПринятиеЗадачиНаИсполнение(ЗаписьXML, ВерсияСервиса, ЭлементДанных)

	Если ВерсияСервиса >= "206" Тогда
		ВыгрузитьПринятиеЗадачиНаИсполнениеПоВерсии206(ЗаписьXML, ЭлементДанных);
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьПринятиеЗадачиНаИсполнениеПоВерсии206(ЗаписьXML, ЭлементДанных)

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "TaskAcception", "206");

	// Записываем данные 
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "ID", ЭлементДанных.Объект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "AcceptDate", ЭлементДанных.ДатаПринятия);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Accepted", ЭлементДанных.ПринятаКИсполнению);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "DataVersion", ЭлементДанных.Объект.ВерсияДанныхНаСервере);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "Executor", ЭлементДанных.Исполнитель);

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

#КонецОбласти

#Область НастройкаСрокаУстаревания

Процедура ЗаписатьВXMLНастройкуСрокаУстаревания(ЗаписьXML, ВерсияКлиента)

	ВыгрузитьНастройкуСрокаУстаревания(ЗаписьXML);

КонецПроцедуры

Процедура ВыгрузитьНастройкуСрокаУстаревания(ЗаписьXML)

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "DataExpirationSettings", "206");

	// Записываем данные 
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "DataExpirationPeriod", Константы.ПериодПервичнойЗагрузкиДанных.Получить());

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

#КонецОбласти

#Область НастройкаМаксРазмераФайла

Процедура ЗаписатьВXMLНастройкуМаксРазмераФайла(ЗаписьXML, ВерсияКлиента)

	ВыгрузитьНастройкуМаксРазмерФайла(ЗаписьXML);

КонецПроцедуры

Процедура ВыгрузитьНастройкуМаксРазмерФайла(ЗаписьXML)

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "MaxFileSizeToDownloadSetting", "206");

	// Записываем данные 
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "FileSize", Константы.МаксимальныйРазмерФайла.Получить());

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

#КонецОбласти

#Область НастройкаСинхронизацииПапок

Процедура ЗаписатьВXMLНастройкуСинхронизацииПапокПисем(ЗаписьXML, ВерсияКлиента)

	Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьНастройкуСинхронизацииПапокПисемПоВерсии206(ЗаписьXML);
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьНастройкуСинхронизацииПапокПисемПоВерсии206(ЗаписьXML)

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "MailFolderSynchronizationSettings", "206");

	// Записываем данные 
	ЗаписьXML.ЗаписатьНачалоЭлемента("FolderList");

	Выборка = Справочники.ПапкиПисем.Выбрать();

	Пока Выборка.Следующий() Цикл

		Если Выборка.Предопределенный Тогда
			Продолжить;
		КонецЕсли;

		ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "Folder", Выборка.Ссылка);

	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента(); // FolderList

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

#КонецОбласти

#Область НастройкиШаблоновПисем

Процедура ЗаписатьВXMLНастройкиШаблоновПисем(ЗаписьXML, ВерсияКлиента)

	Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьНастройкиШаблоновПисемПоВерсии206(ЗаписьXML);
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьНастройкиШаблоновПисемПоВерсии206(ЗаписьXML)

	// Подготавливаем данные
	ПодписьДляНовыхПисем = Константы.ПодписьДляНовыхПисем.Получить();
	ПодписьДляОтвета     = Константы.ПодписьПриОтветеИПересылке.Получить();

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "MailFooterSettings", "206");

	// Записываем данные 
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "NewMailFooter", ПодписьДляНовыхПисем);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "ResponseMailFooter", ПодписьДляОтвета);

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

#КонецОбласти

#Область ПапкиОбъектов

Процедура ЗаписатьВXMLЗаписьПапкиОбъекта(ЗаписьXML, ВерсияСервиса, ЭлементДанных)

	Если ВерсияСервиса >= "206" Тогда
		ВыгрузитьЗаписьПапкиПисемПоВерсии206(ЗаписьXML, ЭлементДанных);
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьЗаписьПапкиПисемПоВерсии206(ЗаписьXML, ЭлементДанных)

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "ObjectInFolder", "206");

	// Записываем данные 
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "Folder", ЭлементДанных.Папка);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXML, "Object", ЭлементДанных.Объект);

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

#КонецОбласти

#Область ПеренаправлениеЗадачи

Процедура ЗаписатьВXMLПеренаправлениеЗадачи(ЗаписьXML, ВерсияСервиса, ЭлементДанных)

	Если ВерсияСервиса >= "206" Тогда
		ВыгрузитьПеренаправлениеЗадачиПоВерсии206(ЗаписьXML, ЭлементДанных);
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьПеренаправлениеЗадачиПоВерсии206(ЗаписьXML, ЭлементДанных)

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "TaskRedirection", "206");

	// Записываем данные 
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "Task", ЭлементДанных.Объект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "DataVersion", ЭлементДанных.Объект.ВерсияДанныхНаСервере);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Type", "ExecutionProcess");
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Comment", 
		ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(ЭлементДанных.Комментарий));
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXML, "NewPerformer", ЭлементДанных.НовыйИсполнитель);

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

#КонецОбласти

#Область ПротоколСобытий

Процедура ЗаписатьВXMLЗаписьПротоколаСобытий(ЗаписьXML, ВерсияСервиса, ЭлементДанных)

	Если Не ЗначениеЗаполнено(СокрЛП(ЭлементДанных.Описание)) Тогда
		Возврат;
	КонецЕсли;

	Если ВерсияСервиса >= "206" Тогда
		ВыгрузитьЗаписьПротоколаСобытийПоВерсии206(ЗаписьXML, ЭлементДанных);
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьЗаписьПротоколаСобытийПоВерсии206(ЗаписьXML, ЭлементДанных)

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "JournalRecord", "206");

	// Записываем данные 
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "RecordType", 
		ОбменВызовСервераПовтИсп.ПолучитьПредставлениеТипаСобытияПротокола(ЭлементДанных.ТипСобытия));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "ObjectType", ЭлементДанных.ТипОбъекта);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "ObjectID", ЭлементДанных.ИдентификаторОбъекта);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Description", 
		ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(ЭлементДанных.Описание));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "RecordDate", ЭлементДанных.Период);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "RecordMSecs", ЭлементДанных.МоментВремени);

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

#КонецОбласти

#Область РезультатыВыполненияЗадачи

Процедура ЗаписатьВXMLРезультатыВыполненияЗадачи(ЗаписьXML, ВерсияСервиса, ЭлементДанных)

	Если ВерсияСервиса >= "206" Тогда
		ВыгрузитьРезультатыВыполненияЗадачиПоВерсии206(ЗаписьXML, ЭлементДанных);
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьРезультатыВыполненияЗадачиПоВерсии206(ЗаписьXML, ЭлементДанных)

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "TaskExecution", "206");

	// Записываем данные 
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "ID", ЭлементДанных.Объект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "DataVersion", ЭлементДанных.Объект.ВерсияДанныхНаСервере);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Date", ЭлементДанных.ДатаВыполнения);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Result", ЭлементДанных.Результат);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Comment", 
		ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(ЭлементДанных.Комментарий));

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

#КонецОбласти

#Область СведенияОПрочтенииОбъекта

Процедура ЗаписатьВXMLЗаписьОПрочтенииОбъекта(ЗаписьXML, ВерсияСервиса, ЭлементДанных)

	Если ВерсияСервиса >= "206" Тогда
		ВыгрузитьЗаписьОПрочтенииОбъектаПоВерсии206(ЗаписьXML, ЭлементДанных);
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьЗаписьОПрочтенииОбъектаПоВерсии206(ЗаписьXML, ЭлементДанных)

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "ObjectReadState", "206");

	// Записываем данные 
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXML, "Object", ЭлементДанных.Объект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "WasRead", ЭлементДанных.Прочтено);

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

#КонецОбласти

#Область ФлагОбъекта

Процедура ЗаписатьВXMLФлагОбъекта(ЗаписьXML, ВерсияСервиса, ЭлементДанных)

	// Сам процесс передавать не нужно - изменение будет передано с задачей.
	Если ТипЗнч(ЭлементДанных.Объект) = Тип("СправочникСсылка.ПроцессыИсполнение") Тогда
		Возврат;
	КонецЕсли;

	Если ВерсияСервиса >= "206" Тогда
		ВыгрузитьФлагОбъектаПоВерсии206(ЗаписьXML, ЭлементДанных);
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьФлагОбъектаПоВерсии206(ЗаписьXML, ЭлементДанных)

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "ObjectFlag", "206");

	// Записываем данные 
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXML, "Object", ЭлементДанных.Объект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Flag", 
		ОбменВызовСервераПовтИсп.ПолучитьПредставлениеЦвета(ЭлементДанных.Флаг));

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

#КонецОбласти

#Область СостояниеПроцессов

Процедура ЗаписатьВXMLЗаписьСостоянияПроцессов(ЗаписьXML, ВерсияСервиса, ЭлементДанных)

	Если ВерсияСервиса >= "206" Тогда
		ВыгрузитьЗаписьСостоянияПроцессовПоВерсии206(ЗаписьXML, ЭлементДанных);
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьЗаписьСостоянияПроцессовПоВерсии206(ЗаписьXML, ЭлементДанных)

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "ProcessStateChange", "206");

	// Записываем данные 
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Type", "ExecutionProcess");
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "Process", ЭлементДанных.Процесс);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "DataVersion", ЭлементДанных.Процесс.ВерсияДанныхНаСервере);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Comment", 
		ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(ЭлементДанных.Комментарий));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "NewState", 
		ОбменВызовСервераПовтИсп.ПолучитьПредставлениеСостоянияБизнесПроцесса(ЭлементДанных.Состояние));

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

#КонецОбласти

#КонецОбласти
