
#Область ПрограммныйИнтерфейс

// Формирует уведомления для новой записи календаря.
//
// Параметры:
//  Объект     - СправочникСсылка.ЗаписиРабочегоКалендаря - Ссылка на объект;
//  Описание   - Строка - Текст уведомления;
//  ДатаНачала - ДатаВремя - Дата и время события;
//  ПериодУведомления - Число - Количество минут, за сколько нужно показать уведомление о событии.
//
Процедура СформироватьЗаписьУведомленияПоОбъекту(Объект, Описание, ДатаНачала, ПериодУведомления = 15) Экспорт

	Если Не ЛокальныеУведомленияВызовСервераПовтИсп.ИспользоватьЛокальныеУведомления() Тогда
		Возврат;
	КонецЕсли;

	Уведомление = Новый Структура();
	Уведомление.Вставить("ПериодУведомления", ПериодУведомления);
	Уведомление.Вставить("Ссылка", Объект);
	Уведомление.Вставить("Сообщение", Описание);
	Уведомление.Вставить("ДатаИВремяСобытия", ДатаНачала);
	Уведомление.Вставить("ДатаИВремяУведомления", 
		ДатаНачала - ПериодУведомления * 60);

	ЗаписатьСообщениеУведомления(Уведомление);

КонецПроцедуры

// Записывает таблицу уведомлений по объекту в регистр.
//
// Параметры:
//  Уведомление - Структура - Параметры создаваемого сообщения об уведомлении;
//
Процедура ЗаписатьСообщениеУведомления(Уведомление) Экспорт

	Если Не ЗначениеЗаполнено(Уведомление.Ссылка) Тогда
		Возврат;
	КонецЕсли;

	// Уведомления в прошедшем времени не имеют смысла
	Если ТекущаяДата() >= Уведомление.ДатаИВремяУведомления Тогда
		Возврат;
	КонецЕсли;

	// Добавляем данные записи
	Запись = РегистрыСведений.ОбъектыУведомлений.СоздатьМенеджерЗаписи();

	Запись.Объект = Уведомление.Ссылка;
	Запись.ДатаВремяУведомления = Уведомление.ДатаИВремяУведомления;
	Запись.Сообщение = Уведомление.Сообщение;
	Запись.ДатаИВремяСобытия = Уведомление.ДатаИВремяСобытия;

	Запись.Записать(Истина);

КонецПроцедуры

// Получает список всех объектов для которых требуется локальное уведомление.
//
// Параметры:
//  Просроченных - Число - Счетчик просроченных уведомлений;
// 
// Возвращаемое значение:
//  Массив - Массив записей о уведомлениях, которые требуется создать.
//
Функция ПолучитьДанныеДляЛокальныхУведомления(Просроченных) Экспорт

	// Создаем возвращаемый объект
	Массив = Новый Массив();

	// Инициализируем счетчик просроченных сообщений
	Просроченных = 0;

	// Если локальные уведомления не используются - сразу выходим
	Если Не ПараметрыСеанса.ИспользоватьЛокальныеУведомления Тогда
		Возврат Массив;
	КонецЕсли;

	// Инициализируем объект выборки данных
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыУведомлений.Объект КАК Ссылка,
		|	ОбъектыУведомлений.Сообщение КАК Описание,
		|	ОбъектыУведомлений.ДатаВремяУведомления КАК ДатаВремяУведомления,
		|	ОбъектыУведомлений.ДатаИВремяСобытия,
		|	ВЫБОР
		|		КОГДА &ТекущаяДата >= ОбъектыУведомлений.ДатаВремяУведомления
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Просрочено,
		|	ВЫБОР ТИПЗНАЧЕНИЯ(ОбъектыУведомлений.Объект)
		|		КОГДА ТИП(Документ.СписаниеДенежныхСредств)
		|			ТОГДА ""СписаниеДенежныхСредств""
		|	КОНЕЦ КАК Тип
		|ИЗ
		|	РегистрСведений.ОбъектыУведомлений КАК ОбъектыУведомлений
		|ГДЕ
		|	НЕ ОбъектыУведомлений.Обработано
		|	И НЕ ОбъектыУведомлений.Объект.ПометкаУдаления";

	// Получаем данные из ИБ
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		Если Выборка.Просрочено Тогда
			Просроченных = Просроченных + 1;
		КонецЕсли;

		// Если срок не указан то уведомлять не о чем
		Если Не ЗначениеЗаполнено(Выборка.ДатаВремяУведомления) Тогда
			Продолжить;
		КонецЕсли;

		// Уведомления о просроченных объектах не выводятся
		Если ТекущаяДата() >= Выборка.ДатаВремяУведомления Тогда
			Продолжить;
		КонецЕсли;

		Запись = Новый Структура("Описание, ДатаВремяУведомления, ДатаИВремяСобытия, Данные, Интервал");

		Запись.Описание = Выборка.Описание;
		Запись.ДатаВремяУведомления = УниверсальноеВремя(Выборка.ДатаВремяУведомления);
		Запись.ДатаИВремяСобытия = Выборка.ДатаИВремяСобытия;
		Запись.Интервал = 0;
		Запись.Данные = // Тип объекта / ссылка / Дата события.
			СтрШаблон(
				"Ref:%1\%2;%3", 
				Выборка.Тип, 
				Строка(Выборка.Ссылка.УникальныйИдентификатор()),
				Выборка.ДатаИВремяСобытия);

		Массив.Добавить(Запись);

	КонецЦикла;

	// Возвращаем данные
	Возврат Массив;

КонецФункции

// Получает ссылку для открытия.
//
// Параметры:
//  ИмяМетаданных - Строка - Идентификатор метаданных;
//  Идентификатор - Строка - Идентификатор объекта.
// 
// Возвращаемое значение:
//  Ссылка - Полученная по идентификатору ссылка.
//
Функция ПолучитьСсылку(ИмяМетаданных, Идентификатор) Экспорт

	// По-умолчанию возвращать нечего.
	ВозвращаемоеЗначение = Неопределено;

	// Проверяем, что идентификатор это корректный УникальныйИдентификатор.
	Попытка
		УУИД = Новый УникальныйИдентификатор(Идентификатор);
	Исключение
		Возврат ВозвращаемоеЗначение;
	КонецПопытки;

	// Проверяем, что запрошенный тип метаданных присутствует в базе.
	Если Не Метаданные.Справочники.Найти(ИмяМетаданных) = Неопределено Тогда
		ВозвращаемоеЗначение = Справочники[ИмяМетаданных].ПолучитьСсылку(УУИД);

	ИначеЕсли Не Метаданные.Документы.Найти(ИмяМетаданных) = Неопределено Тогда
		ВозвращаемоеЗначение = Документы[ИмяМетаданных].ПолучитьСсылку(УУИД);

	Иначе
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;

	// Проверяем существование объекта. В противном случае при открытии формы будет ошибка.
	Попытка

		Если Не ВозвращаемоеЗначение = Неопределено Тогда

			Объект = ВозвращаемоеЗначение.ПолучитьОбъект();

			Если Объект = Неопределено Тогда
				ВозвращаемоеЗначение = Неопределено;
			КонецЕсли;

		КонецЕсли;

	Исключение
		ВозвращаемоеЗначение = Неопределено;

	КонецПопытки;

	Возврат ВозвращаемоеЗначение;

КонецФункции

// Удаляет все записи событий уведомления по указанному объекту.
//
// Параметры:
//  Ссылка	 - Справочник.Ссылка - Ссылка на запись календаря.
//
Процедура УдалитьЗаписьСообщенияПоОбъекту(Ссылка) Экспорт

	Набор = РегистрыСведений.ОбъектыУведомлений.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(Ссылка);
	Набор.Записать(Истина);

КонецПроцедуры

#КонецОбласти