
#Область ПрограммныйИнтерфейс

// Удаляет все данные на устройстве, приводя базу в исходное состояние.
//
Процедура УдалитьВсеДанные() Экспорт

	//Перед запуском удаления всех данных необходимо отменить
	//задание очистки от устаревших данных, если оно активно
	ОчисткаБазыДанныхВызовСервера.ПрерватьОчисткуОтСтарыхДанныхВФоне();
	
	Константы.ИнициированаОчисткаБазы.Установить(Истина);
	
	Для Каждого Эл Из Метаданные.Справочники Цикл

		Выборка = Справочники[Эл.Имя].Выбрать();
		Пока Выборка.Следующий() Цикл

			Если Выборка.Предопределенный Тогда
				Продолжить;
			КонецЕсли;

			УдалитьОбъект(Выборка.ПолучитьОбъект());

		КонецЦикла;

	КонецЦикла;

	Для Каждого Эл Из Метаданные.Документы Цикл

		Выборка = Документы[Эл.Имя].Выбрать();
		Пока Выборка.Следующий() Цикл
			УдалитьОбъект(Выборка.ПолучитьОбъект());
		КонецЦикла;

	КонецЦикла;

	Для Каждого Эл Из Метаданные.РегистрыСведений Цикл
		НаборЗаписей = РегистрыСведений[Эл.Имя].СоздатьНаборЗаписей();
		НаборЗаписей.Записать();
	КонецЦикла;

	// todo: delete
	//ПапкаОбъект = Справочники.ПапкиПисем.ВсеВходящие.ПолучитьОбъект();
	//ПапкаОбъект.Наименование    = НСтр("ru = 'Все входящие'; en = 'All incoming'");
	//ПапкаОбъект.КоличествоПисем = 0;
	//ПапкаОбъект.КоличествоНепрочитанныхПисем = 0;
	//ПапкаОбъект.Записать();

	//ПапкаОбъект = Справочники.ПапкиПисем.ВсеНепрочитанные.ПолучитьОбъект();
	//ПапкаОбъект.Наименование    = НСтр("ru = 'Все непрочитанные'; en = 'All unread'");
	//ПапкаОбъект.КоличествоПисем = 0;
	//ПапкаОбъект.КоличествоНепрочитанныхПисем = 0;
	//ПапкаОбъект.Записать();

	//ВыборкаГруппыЗадач = Справочники.ГруппыЗадач.Выбрать();
	//Пока ВыборкаГруппыЗадач.Следующий() Цикл

	//	Если ВыборкаГруппыЗадач.ПометкаУдаления Тогда
	//		Продолжить;
	//	КонецЕсли;

	//	ГруппаЗадачОбъект = ВыборкаГруппыЗадач.ПолучитьОбъект();
	//	ГруппаЗадачОбъект.КоличествоВсего = 0;
	//	ГруппаЗадачОбъект.Записать();

	//КонецЦикла;

	//ВыборкаГруппыИсполнений = Справочники.ГруппыИсполнений.Выбрать();
	//Пока ВыборкаГруппыИсполнений.Следующий() Цикл

	//	Если ВыборкаГруппыИсполнений.ПометкаУдаления Тогда
	//		Продолжить;
	//	КонецЕсли;

	//	ГруппаИсполненийОбъект = ВыборкаГруппыИсполнений.ПолучитьОбъект();
	//	ГруппаИсполненийОбъект.КоличествоВсего = 0;
	//	ГруппаИсполненийОбъект.Записать();

	//КонецЦикла;

	Для Каждого Эл Из Метаданные.ПланыОбмена Цикл

		ЭтотУзел = ПланыОбмена[Эл.Имя].ЭтотУзел();

		Выборка  = ПланыОбмена[Эл.Имя].Выбрать();
		Пока Выборка.Следующий() Цикл

			Если Выборка.Ссылка = ЭтотУзел Тогда
				Продолжить;
			КонецЕсли;

			УдалитьОбъект(Выборка.ПолучитьОбъект());

		КонецЦикла;

	КонецЦикла;

	Если Константы.ЭтоДемоРежим.Получить() Тогда

		Константы.АдресЦентральнойБазы.Установить("https://");
		Константы.ПользовательЦентральнойБазы.Установить("");
		Константы.ПарольПользователя.Установить("");
		Константы.СрокУстареванияДанных.Установить(7);
		Константы.ПериодПервичнойЗагрузкиДанных.Установить(7);
		Константы.МаксимальныйРазмерФайла.Установить(500);
		Константы.ЭтоДемоРежим.Установить(Ложь);

	КонецЕсли;

	Константы.ДатаПоследнегоОбновления.Установить(Дата(1, 1, 1));
	Константы.ЕстьНеотправленныеДанные.Установить(Ложь);
	Константы.КодУстройства.Установить(Строка(Новый УникальныйИдентификатор()));
	Константы.СессияСинхронизации.Установить(0);
	Константы.ПоследняяОтправленнаяНаСерверЗаписьПротокола.Установить(0);

	Константы.ТекущийРаздел.Установить("");
	// Константы.ОсновнаяУчетнаяЗапись.Установить(Справочники.УчетныеЗаписи.ПустаяСсылка());
	//Константы.ТекущаяПапкаПисем.Установить(Справочники.ПапкиПисем.ВсеВходящие);

	// Константы.ПодписьДляНовыхПисем.Установить(Справочники.ШаблоныТекстовПисем.ПустаяСсылка());
	// Константы.ПодписьПриОтветеИПересылке.Установить(Справочники.ШаблоныТекстовПисем.ПустаяСсылка());
	Константы.ИспользоватьЛокальныеУведомления.Установить(Истина);
	Константы.ИспользуемаяВерсияФорматаОбмена.Установить("");

	ОбменВызовСервера.СброситьСостояниеЗагрузкиЧастейСообщений();
	ОбновитьПовторноИспользуемыеЗначения();

	Константы.ИнициированаОчисткаБазы.Установить(Ложь);
	
КонецПроцедуры

// Выполняет очистку базы от данных находящихся за границами устаревания.
//
Процедура ВыполнитьОчисткуОтСтарыхДанных() Экспорт

	// todo
	Возврат;
	
	Попытка
		УдалитьФайлы(ПараметрыСеанса.ПутьКаталогаФайлов);
	Исключение

		Инфо = ИнформацияОбОшибке();

		ТекстПредупреждения = 
			РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
				НСтр("ru = 'При удалении временных файлов произошла ошибка.'
					|; en = 'Cannot delete temporary files.'"), 
				ПодробноеПредставлениеОшибки(Инфо));
				
		РаботаСПротоколомСобытийВызовСервера.ДобавитьПредупреждение(ТекстПредупреждения);

	КонецПопытки;

	Константы.ИдентификаторПоследнегоЗагруженногоСообщения.Установить(УникальныйИдентификаторПустой());
	Константы.НомерПоследнейЗагруженнойЧастиСообщения.Установить(0);

	ЦентральныйУзелОбмена = ОбменВызовСервераПовтИсп.ПолучитьЦентральныйУзелОбмена();

	Если Константы.ХранитьПисьмаВТечениеПериода.Получить() > 0 Тогда

		ДатаОкончанияХранения = ТекущаяДата() - Константы.ХранитьПисьмаВТечениеПериода.Получить();
		
		Выборка = РегистрыСведений.ДатыЗагрузкиОбъектов.Выбрать(, ДатаОкончанияХранения);
		Пока Выборка.Следующий() Цикл

			Если ТипЗнч(Выборка.Объект) = Тип("ДокументСсылка.ВходящееПисьмо")
				Или ТипЗнч(Выборка.Объект) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
				
				// Выполним проверку - не является ли письмо предметом задачи.
				Запрос = Новый Запрос();
				Запрос.УстановитьПараметр("Предмет", Выборка.Объект);
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ЗадачиПредметы.Ссылка
					|ИЗ
					|	Справочник.Задачи.Предметы КАК ЗадачиПредметы
					|ГДЕ
					|	ЗадачиПредметы.Предмет = &Предмет";

				Если Запрос.Выполнить().Пустой() Тогда

					// Письмо не является предметом - удаляем с устройства.
					УдалитьОбъектПоИстечениюСрокаХранения(ЦентральныйУзелОбмена, Выборка.Объект);

				Иначе

					// Письмо является предметом - удалить нельзя, т.к. если задача активна, то 
					// у пользователя будет битая ссылка в представлении задачи.

					// Очищаем папку письма - оно пропадет в списке, но будет видно в задаче.
					ПисьмоОбъект = Выборка.Объект.ПолучитьОбъект();
					ПисьмоОбъект.Папка = Неопределено;
					ПисьмоОбъект.Записать();

					// Изменения на сервер передавать не нужно.
					ПланыОбмена.УдалитьРегистрациюИзменений(ЦентральныйУзелОбмена, Выборка.Объект);

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;
	
	Если Константы.ХранитьЗаписиКалендаряВТечениеПериода.Получить() > 0 Тогда

		ДатаОкончанияХранения = ТекущаяДата() - Константы.ХранитьЗаписиКалендаряВТечениеПериода.Получить();

		Выборка = РегистрыСведений.ДатыЗагрузкиОбъектов.Выбрать(, ДатаОкончанияХранения);

		Пока Выборка.Следующий() Цикл

			Если ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда

				УдалитьОбъектПоИстечениюСрокаХранения(ЦентральныйУзелОбмена, Выборка.Объект);

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

// Запускает очистку базы от устаревших данных в фоновом режиме
//
Функция ЗапуститьОчисткуОтСтарыхДанныхВФоне() Экспорт
	
	ИмяФоновогоЗадания = "ВыполнитьОчисткуОтСтарыхДанных";
	
	// Проверим наличие активного задания синхронизации.
	ОтборЗаданий = Новый Структура();
	ОтборЗаданий.Вставить("Наименование", ИмяФоновогоЗадания);
	ОтборЗаданий.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);

	Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий);
	Если Не Задания.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить("ОчисткаБазыДанныхВызовСервера.ВыполнитьОчисткуОтСтарыхДанных", , , ИмяФоновогоЗадания);
		
	Возврат Истина
	
КонецФункции

// Прерывает очистку базы от устаревших данных в фоновом режиме
Процедура ПрерватьОчисткуОтСтарыхДанныхВФоне() Экспорт
	
	ИмяФоновогоЗадания = "ВыполнитьОчисткуОтСтарыхДанных";
	
	// Проверим наличие активного задания синхронизации.
	ОтборЗаданий = Новый Структура();
	ОтборЗаданий.Вставить("Наименование", ИмяФоновогоЗадания);
	ОтборЗаданий.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);

	Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий);
	Для Каждого Задание Из Задания Цикл
		Задание.Отменить();	
	КонецЦикла;	
		
КонецПроцедуры

// Очищает регистр загруженных частей сообщений.
//
Процедура ОчиститьПринятыеДанные() Экспорт

	НаборЗаписей = РегистрыСведений.ПолученныеДанныеОбмена.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();

КонецПроцедуры

// Дожидается окончания процесса отключения от сервера
//
// Параметры:
//  ИмяЗадания - Строка - Имя фонового задания.
//
Процедура ДождатьсяОкончанияПроцессаОтключенияОтСервера(ИмяЗадания) Экспорт

	Отбор = Новый Структура("Наименование", ИмяЗадания);

	// Находим задание. 
	// Т.к. оно к этому моменту может и не запуститься, ждем начала его работы.

	ЗаданиеЗавершено = Ложь;
	Пока Не ЗаданиеЗавершено Цикл

		Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);

		Если Не Задания.Количество() = 0 
			И Не Задания[0].Состояние = СостояниеФоновогоЗадания.Активно Тогда

			ЗаданиеЗавершено = Истина;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Удаляет непосредственное удаление объекта из базы данных.
//
// Параметры:
//  Объект - Ссылка - Ссылка на удаляемый объект.
//
Процедура УдалитьОбъект(Объект)

	Попытка
		Объект.ДополнительныеСвойства.Вставить("ОчисткаБазы");
		Объект.Удалить();
	Исключение
		// Ситуация ошибочная, и такого быть не должно, но ничего не делаем.
		Инфо = ИнформацияОбОшибке();
	КонецПопытки;

КонецПроцедуры

// Удалить объект по истечению срока хранения
//
// Параметры:
//  ЦентральныйУзелОбмена - ПланОбменаСсылка.Мобильный - Ссылка на узел обмена с сервером;
//  Объект				  - Ссылка - Ссылка на удаляемый объект.
//
Процедура УдалитьОбъектПоИстечениюСрокаХранения(ЦентральныйУзелОбмена, Объект)

	Идентификатор = Объект.УникальныйИдентификатор();
	ТипОбъекта = ТипЗнч(Объект);

	Попытка

		УдалениеДанных = Новый УдалениеОбъекта(Объект);
		УдалениеДанных.Записать();

		ПланыОбмена.УдалитьРегистрациюИзменений(ЦентральныйУзелОбмена, УдалениеДанных);

		РаботаСПротоколомСобытийВызовСервера.ДобавитьЗаписьРасширенногоПротокола(Объект, 
			НСтр("ru = 'Объект подвержен процедуре очистки от старых данных'
			|; en = 'The object is subject to procedure of cleaning of old data'"));

	Исключение

		РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформациюПоОбъекту(
			НСтр("ru = 'Не удалось удалить объект'; en = 'Can''t delete the object'"), 
			ТипОбъекта, Идентификатор);

	КонецПопытки;

КонецПроцедуры

#КонецОбласти