
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОБЪЕКТОВ

#Область ОбработчикиОбъектов

Функция ЗаписатьОбъект(Сообщение, СведенияОЗагруженныхДанных, МоментВремени = Неопределено) Экспорт
	
	Если Сообщение.Свойство("LogRecord") Тогда
		ЗаписатьИнформациюОбОшибке(Сообщение.LogRecord, СведенияОЗагруженныхДанных);
	КонецЕсли;
	
	Если Сообщение.Свойство("Objects") Тогда
		Для Каждого Объект Из Сообщение.Objects Цикл
			
			// Справочники
			Если НРег(Объект.Тип) = НРег(ОбменКлиентСервер.Сущность_ОбъектСтроительства()) Тогда
				ЗаписатьОбъектСтроительства(Объект, СведенияОЗагруженныхДанных);
						
			ИначеЕсли НРег(Объект.Тип) = НРег(ОбменКлиентСервер.Сущность_Контрагент()) Тогда
				ЗаписатьКонтрагента(Объект, СведенияОЗагруженныхДанных);
				
			ИначеЕсли НРег(Объект.Тип) = НРег(ОбменКлиентСервер.Сущность_Город())Тогда
				ЗаписатьГород(Объект, СведенияОЗагруженныхДанных);
				
			ИначеЕсли НРег(Объект.Тип) = НРег(ОбменКлиентСервер.Сущность_СтатьяРасходов()) Тогда
				ЗаписатьСтатьюРасходов(Объект, СведенияОЗагруженныхДанных);
				
			// Документы
			ИначеЕсли НРег(Объект.Тип) = НРег(ОбменКлиентСервер.Сущность_СписаниеДенежныхСредств()) Тогда
				ЗаписатьСписаниеДенежныхСредств(Объект, СведенияОЗагруженныхДанных);	
				
			Иначе
				МоментВремени = РегистрыСведений.ПротоколСобытий.ДобавитьПредупреждение(
					СтрШаблон(НСтр("ru = 'Обнаружен неизвестный тип объекта (%1)'"), Объект.Тип));
			
			КонецЕсли;
		КонецЦикла;		
	Иначе		
		МоментВремени = РегистрыСведений.ПротоколСобытий.ДобавитьПредупреждение(
				НСтр("ru = 'Обнаружен неизвестный тип объекта'"));
	КонецЕсли;
		
КонецФункции

Функция ЗаписатьИнформациюОбОшибке(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ТипЗаписи = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "RecordType", "Строка");
	Описание = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Description", "Строка");

	Если ТипЗаписи = "Error" Тогда
		МоментВремени = РегистрыСведений.ПротоколСобытий.ДобавитьОшибку(Описание);
		РегистрыСведений.ПротоколСобытий.УстановитьНеобходимостьОтображенияПослеСинхронизации(
			МоментВремени, Истина);

		СведенияОЗагруженныхДанных.ЕстьОшибки = Истина;

	ИначеЕсли ТипЗаписи = "Information" Тогда
		МоментВремени = РегистрыСведений.ПротоколСобытий.ДобавитьИнформацию(Описание);

	ИначеЕсли ТипЗаписи = "Warning" Тогда
		МоментВремени = РегистрыСведений.ПротоколСобытий.ДобавитьПредупреждение(Описание);
		РегистрыСведений.ПротоколСобытий.УстановитьНеобходимостьОтображенияПослеСинхронизации(
			МоментВремени, Истина);

	КонецЕсли;

КонецФункции

// Справочники

Функция ЗаписатьГород(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных, КраткаяЗапись = Ложь)
	
	Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(СтруктураДанныхОбъекта.Тип, 
		СтруктураДанныхОбъекта.UUID);

	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.Города.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;

	Объект.Код = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Код", "Строка");	
	Объект.Наименование = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Наименование", "Строка");
		
	Объект.Записать();

	Возврат Объект.Ссылка;	
		
КонецФункции

Функция ЗаписатьОбъектСтроительства(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных, КраткаяЗапись = Ложь)
	
	Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(СтруктураДанныхОбъекта.Тип, 
		СтруктураДанныхОбъекта.UUID);

	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.Объекты.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;

	Объект.Код = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Код", "Строка");	
	Объект.Наименование = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Наименование", "Строка");
		
	Объект.Записать();

	Возврат Объект.Ссылка;	
	
КонецФункции

Функция ЗаписатьКонтрагента(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных, КраткаяЗапись = Ложь)
	
	Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(СтруктураДанныхОбъекта.Тип, 
		СтруктураДанныхОбъекта.UUID);

	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.Контрагенты.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;

	Объект.Код = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Код", "Строка");	
	Объект.Наименование = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Наименование", "Строка");
		
	Объект.Записать();

	Возврат Объект.Ссылка;	
		
КонецФункции

Функция ЗаписатьСтатьюРасходов(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных, КраткаяЗапись = Ложь)
	
	Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(СтруктураДанныхОбъекта.Тип, 
		СтруктураДанныхОбъекта.UUID);

	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.СтатьиРасходов.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;

	Объект.Код = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Код", "Строка");	
	Объект.Наименование = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Наименование", "Строка");
		
	Объект.Записать();

	Возврат Объект.Ссылка;	
		
КонецФункции

// Документы

Функция ЗаписатьСписаниеДенежныхСредств(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)
	
	Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(СтруктураДанныхОбъекта.Тип,
		СтруктураДанныхОбъекта.UUID);
		
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы.СписаниеДенежныхСредств.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Дата = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Дата", "Дата");
	Объект.Номер = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Номер", "Строка");
	
	Объект.Объект = ПолучитьСсылку(СтруктураДанныхОбъекта.Объект);
	Объект.Контрагент = ПолучитьСсылку(СтруктураДанныхОбъекта.Контрагент);	
	Объект.ТипПлатежа = Перечисления.ТипыПлатежей[СтруктураДанныхОбъекта.ТипПлатежа];
	Объект.Сумма = СтруктураДанныхОбъекта.Сумма;
	Объект.СтатьяРасходов = ПолучитьСсылку(СтруктураДанныхОбъекта.СтатьяРасходов);		
	
	Объект.Комментарий = СтруктураДанныхОбъекта.Комментарий;	
	Объект.Ответственный = СтруктураДанныхОбъекта.Ответственный;
	
	Объект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
	
	// Проведение / отмена проведения / пометка на удаление	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если СтруктураДанныхОбъекта.ПометкаУдаления Тогда
		Объект.ПометкаУдаления = Истина;
	Иначе
		Объект.ПометкаУдаления = Ложь;
		Если СтруктураДанныхОбъекта.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;			
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		КонецЕсли;
	КонецЕсли;		
	Объект.Записать(РежимЗаписи);

	РегистрыСведений.ДатыЗагрузкиОбъектов.ОбновитьДатуПоследнегоИзмененияОбъекта(Объект.Ссылка);

	Возврат Объект.Ссылка;
	
КонецФункции

#КонецОбласти


// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСсылку(СтруктураДанныхОбъекта)
	
	Если СтруктураДанныхОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураДанныхОбъекта.UUID = "00000000-0000-0000-0000-000000000000" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(
		СтруктураДанныхОбъекта.Тип, СтруктураДанныхОбъекта.UUID);
		
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = ЗаписатьПростойОбъект(СтруктураДанныхОбъекта);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаписатьПростойОбъект(СтруктураДанныхОбъекта)
		
	Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(СтруктураДанныхОбъекта.Тип, 
		СтруктураДанныхОбъекта.UUID);

	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = ОбменВызовСервераПовтИсп.СоздатьОбъектПоТипу(СтруктураДанныхОбъекта);
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Возврат Объект;
		
КонецФункции

// Получает значение указанного реквизита из прочитанных данных
//
// Параметры:
//  СтруктураДанныхОбъекта	 - Соответствие - Предварительно прочитанные значения реквизитов объекта;
//  ИмяРеквизита			 - Строка - Имя получаемого реквизита объекта;
//  ИмяТипа					 - Строка - Тип к которому преобразуются данные из XML-строки;
//  Обязательный			 - Булево - Признак обязательного реквизита.
// 
// Возвращаемое значение:
//  Значение - Значение запрошенного типа.
//
Функция ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, ИмяРеквизита, ИмяТипа = Неопределено, 
		Обязательный = Ложь)

	Значение = СтруктураДанныхОбъекта[ВРег(ИмяРеквизита)];

	// Читаем значение атрибута из потока данных
	Если Значение = Неопределено Тогда
		Если Обязательный Тогда			
			ТекстСообщения = НСтр("ru = 'Для ""%1"" отсутствует ожидаемый атрибут (%2)';
					  |en = 'Attribute ""%2"" expected for ""%1""'");
			ВызватьИсключение 
				СтрШаблон(ТекстСообщения, СтруктураДанныхОбъекта["ИмяТипа"], ИмяРеквизита);
		Иначе
			Возврат Значение;
		КонецЕсли;
	КонецЕсли;

	// Получаем значение нужного типа 
	Если ИмяТипа = Неопределено Тогда
		Возврат Значение;
	Иначе
		Возврат XMLЗначение(Тип(ИмяТипа), Значение);
	КонецЕсли;

КонецФункции

#КонецОбласти