
Процедура СообщениеДляПодключенияУстройства(Сообщение) Экспорт
	
	Если Сообщение = Неопределено Тогда
		Сообщение = Новый Структура();
	КонецЕсли;
	
	ЗаписатьНастройкуСрокаУстаревания(Сообщение);
	ЗаписатьНастройкуМаксРазмераФайла(Сообщение);

	Сообщение.Вставить("Connect", 
		Новый Структура("ClientCode, InitialPeriod", 
			Константы.КодУстройства.Получить(), Константы.ПериодПервичнойЗагрузкиДанных.Получить()));
		
	ИнформацияОКлиенте(Сообщение);
			
КонецПроцедуры

Процедура СообщениеДляОтключенияУстройства(Сообщение) Экспорт
	
	Если Сообщение = Неопределено Тогда
		Сообщение = Новый Структура();
	КонецЕсли;
	
	Сообщение.Вставить("Disconnect", 
		Новый Структура("ClientCode", Константы.КодУстройства.Получить()));
				
КонецПроцедуры

Процедура ЗаписатьНастройкуСрокаУстаревания(Сообщение)

	Сообщение.Вставить("DataExpirationSettings", 
		Новый Структура("DataExpirationPeriod", Константы.ПериодПервичнойЗагрузкиДанных.Получить()));
	
КонецПроцедуры

Процедура ЗаписатьНастройкуМаксРазмераФайла(Сообщение)

	Сообщение.Вставить("MaxFileSizeToDownloadSetting",
		Новый Структура("FileSize", Константы.МаксимальныйРазмерФайла.Получить()));
	
КонецПроцедуры

Функция ИнформацияОКлиенте(Сообщение) Экспорт

	СистемнаяИнформация = Новый СистемнаяИнформация;

	Сообщение.Вставить("ClientInfo", 
		Новый Структура("AppVersion, OS, RAM, DeviceName, ScreenSize"));
		
	Сообщение.ClientInfo.AppVersion = Константы.ВерсияАренды.Получить();
		
	Сообщение.ClientInfo.OS = 
		ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(СистемнаяИнформация.ВерсияОС);

	РазмерПамяти = СистемнаяИнформация.ОперативнаяПамять;
	РазмерПамяти = ?(РазмерПамяти = 0, 64, РазмерПамяти);
	Сообщение.ClientInfo.RAM = РазмерПамяти;

	Сообщение.ClientInfo.DeviceName = 
		ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(ИмяКомпьютера());

	РазмерЭкрана = ЭкранКлиентСервер.ДиагональЭкрана();
	РазмерЭкрана = ?(ЗначениеЗаполнено(РазмерЭкрана), РазмерЭкрана, 4);
	Сообщение.ClientInfo.ScreenSize = 
		Формат(РазмерЭкрана,"ЧЦ=3; ЧДЦ=1; ЧРД=.; ЧГ=");

КонецФункции
	
		
Функция СообщениеДляПередачиДанныхПроблемах(Сообщение) Экспорт
	
	// todo
	
	//// Записываем в файл заголовок объекта.
	//ОбменФормированиеDMXСервер.ЗаписатьЗаголовокОбъекта(
	//	ЗаписьXML, "ProblemReportFromUser", ВерсияСервиса);

	//// Записываем описание произошедшей проблемы.
	//ОбменФормированиеDMXСервер.ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Description", 
	//	ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(Текст));

	//// Дополняем описание проблемы записями за последнюю неделю.
	//ЗаписьXML.ЗаписатьНачалоЭлемента("JournalRecords");

	//ГраницаВыборки  = ТекущаяДата() - 7 * 24 * 60 * 60;

	//ПротоколВыборка = РегистрыСведений.ПротоколСобытий.Выбрать(ГраницаВыборки);
	//Пока ПротоколВыборка.Следующий() Цикл

	//	ПротоколНаборЗаписей = РегистрыСведений.ПротоколСобытий.СоздатьНаборЗаписей();
	//	ПротоколНаборЗаписей.Отбор.Период.Установить(ПротоколВыборка.Период);
	//	ПротоколНаборЗаписей.Отбор.МоментВремени.Установить(ПротоколВыборка.МоментВремени);
	//	ПротоколНаборЗаписей.Прочитать();

	//	ОбменФормированиеDMXСервер.ЗаписатьОбъектВXML(
	//		ЗаписьXML, ВерсияСервиса, ПротоколНаборЗаписей);

	//КонецЦикла;

	//// Закрываем контейнер JournalRecords
	//ЗаписьXML.ЗаписатьКонецЭлемента();

	//// Закрываем контейнер ProblemReportFromUser
	//ЗаписьXML.ЗаписатьКонецЭлемента();

	//// Закрываем файл с данными
	//ЗакончитьЗаписьВXML(ЗаписьXML);

КонецФункции
		
	
///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТ ИЗМЕНЕННЫХ ДАННЫХ

#Область ЭкспортИзмененныхДанных

Функция СообщениеДляВыгрузкиИзмененныхДанных(Сообщение) Экспорт
	
	Если Сообщение = Неопределено Тогда
		Сообщение = Новый Структура();
	КонецЕсли;
		
	ЦентральныйУзелОбмена = ОбменВызовСервераПовтИсп.ПолучитьЦентральныйУзелОбмена();

	Попытка
		// Выбираются все измененные данные
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(
			ЦентральныйУзелОбмена, 
			ЦентральныйУзелОбмена.НомерОтправленного);

		Сообщение.Вставить("Objects", Новый Массив());
			
		ЕстьДанныеДляВыгрузки = Ложь;
		Пока ВыборкаИзменений.Следующий() Цикл

			Если Не ЕстьДанныеДляВыгрузки Тогда
				ОбменЭкспорт.ИнформацияОКлиенте(Сообщение);
				ЕстьДанныеДляВыгрузки = Истина;
			КонецЕсли;
			
			ДобавитьОбъект(Сообщение, ВыборкаИзменений.Получить());
		КонецЦикла;

		Если ЕстьДанныеДляВыгрузки  Тогда
			ОбменФормированиеСообщенийВызовСервера.ВыполнитьЗаписьЭлементаОчередиСообщения(
				Неопределено, Сообщение);				
				
			ОбменВызовСервера.УдалитьРегистрациюИзмененийОтправленныхДанных();
		КонецЕсли;

		Возврат Истина;

	Исключение
		ОбменФормированиеСообщенийВызовСервера.ОбработатьОшибкуПриФормированиеВыгрузкиВсехИзмененныхДанных(
			ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
		
КонецФункции

Процедура ДобавитьОбъект(Сообщение, ЭлементДанных)
	
	Если Не Сообщение.Свойство("Objects") Тогда
		Сообщение.Вставить("Objects", Новый Массив());
	КонецЕсли;
	
	РезультатОбъект = Неопределено;
	
	Если ТипЗнч(ЭлементДанных) = Тип("ДокументСсылка.ЗаявкаНаОбслуживание") 
		ИЛИ ТипЗнч(ЭлементДанных) = Тип("ДокументОбъект.ЗаявкаНаОбслуживание") Тогда		
		РезультатОбъект = ВыгрузитьЗаявкуНаОбслуживание(ЭлементДанных.Ссылка);			
			
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("ДокументСсылка.ЗаключениеДоговораАренды") 
		ИЛИ ТипЗнч(ЭлементДанных) = Тип("ДокументОбъект.ЗаключениеДоговораАренды") Тогда			
		РезультатОбъект = ВыгрузитьЗаключениеДоговораАренды(ЭлементДанных.Ссылка);
			
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("ДокументСсылка.ДополнительноеСоглашение") 
		ИЛИ ТипЗнч(ЭлементДанных) = Тип("ДокументОбъект.ДополнительноеСоглашение") Тогда
		РезультатОбъект = ВыгрузитьДополнительноеСоглашение(ЭлементДанных.Ссылка);
			
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("ДокументСсылка.РасторжениеДоговораАренды")
		ИЛИ ТипЗнч(ЭлементДанных) = Тип("ДокументОбъект.РасторжениеДоговораАренды") Тогда		
		РезультатОбъект = ВыгрузитьРасторжениеДоговораАренды(ЭлементДанных.Ссылка);
			
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("ДокументСсылка.СчетНаАренду") 
		ИЛИ ТипЗнч(ЭлементДанных) = Тип("ДокументОбъект.СчетНаАренду") Тогда		
		РезультатОбъект = ВыгрузитьСчетНаАренду(ЭлементДанных.Ссылка);
					
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Отсутствует обработчик для типа (%1)'"), ТипЗнч(ЭлементДанных));		
	КонецЕсли;
	
	Сообщение.Objects.Добавить(РезультатОбъект);
	
КонецПроцедуры

// Документы

Функция ВыгрузитьЗаявкуНаОбслуживание(ЭлементДанных)
		
	СтруктураДанных = Новый Структура(
		"Тип, 
		|UUID, 
		|Дата, 
		|Номер, 
		|Организация, 
		|Контрагент, 
		|ДоговорКонтрагента,
		|ОбъектАренды,
		|ЭлементОбъекта,
		|ОписаниеЗаявки,
		|СтатусЗаявки,
		|Комментарий,
		|ДатаВыполненияРабот,
		|РучнаяКорректировка,
		|Ответственный");
			
	СтруктураДанных.Тип = ОбменКлиентСервер.Сущность_ЗаявкаНаОбслуживание();
	СтруктураДанных.UUID = XMLСтрока(ЭлементДанных);
	СтруктураДанных.Дата = ЭлементДанных.Дата;
	СтруктураДанных.Номер = ЭлементДанных.Номер;
	
	СтруктураДанных.Организация = Новый Структура("Тип, UUID, Код, Наименование",
		ОбменКлиентСервер.Сущность_Организация(),
		XMLСтрока(ЭлементДанных.Организация),
		ЭлементДанных.Организация.Код,
		ЭлементДанных.Организация.Наименование);
		
	СтруктураДанных.Контрагент = Новый Структура("Тип, UUID, Код, Наименование",
		ОбменКлиентСервер.Сущность_Контрагент(),
		XMLСтрока(ЭлементДанных.Контрагент),
		ЭлементДанных.Контрагент.Код,
		ЭлементДанных.Контрагент.Наименование);
		
	СтруктураДанных.ДоговорКонтрагента = Новый Структура("Тип, UUID, Код, Наименование",
		ОбменКлиентСервер.Сущность_ДоговорКонтрагента(),
		XMLСтрока(ЭлементДанных.ДоговорКонтрагента),
		ЭлементДанных.ДоговорКонтрагента.Код,
		ЭлементДанных.ДоговорКонтрагента.Наименование);
		
	СтруктураДанных.ОбъектАренды = Новый Структура("Тип, UUID, Код, Наименование",
		ОбменКлиентСервер.Сущность_ОбъектАренды(),
		XMLСтрока(ЭлементДанных.ОбъектАренды),
		ЭлементДанных.ОбъектАренды.Код,
		ЭлементДанных.ОбъектАренды.Наименование);
		
	СтруктураДанных.ЭлементОбъекта = Новый Структура("Тип, UUID, Код, Наименование",
		ОбменКлиентСервер.Сущность_ЭлементОбъектовАренды(),
		XMLСтрока(ЭлементДанных.ЭлементОбъекта),
		ЭлементДанных.ЭлементОбъекта.Код,
		ЭлементДанных.ЭлементОбъекта.Наименование);
		
	СтруктураДанных.ОписаниеЗаявки = ЭлементДанных.ОписаниеЗаявки;
	СтруктураДанных.СтатусЗаявки = XMLСтрока(ЭлементДанных.СтатусЗаявки);
	СтруктураДанных.Комментарий = ЭлементДанных.Комментарий;
	СтруктураДанных.ДатаВыполненияРабот = ЭлементДанных.ДатаВыполненияРабот;
	СтруктураДанных.РучнаяКорректировка = ЭлементДанных.РучнаяКорректировка;
	
	// todo: синхронизация пользователей? Пока просто строка
	СтруктураДанных.Ответственный = ЭлементДанных.Ответственный;
			
	Возврат СтруктураДанных;		
	
КонецФункции

// Функционал не используется для арендатора, 
// для подключения необходимо разрешить регистрацию в плане обмена "ОбменССервером"

Функция ВыгрузитьЗаключениеДоговораАренды(ЭлементДанных)
		
	СтруктураДанных = Новый Структура(
		"Тип, 
		|UUID, 
		|Дата, 
		|Номер, 
		|Организация, 
		|Контрагент, 
		|ДоговорКонтрагента,
		|ДатаЗаключенияДоговора,
		|ДатаОкончанияДоговора,
		|Комментарий,
		|Ответственный");
			
	СтруктураДанных.Тип = ОбменКлиентСервер.Сущность_ЗаключениеДоговораАренды();
	СтруктураДанных.UUID = XMLСтрока(ЭлементДанных);
	СтруктураДанных.Дата = XMLСтрока(ЭлементДанных.Дата);
	СтруктураДанных.Номер = XMLСтрока(ЭлементДанных.Номер);
	
	СтруктураДанных.Организация = Новый Структура("Тип, UUID, Код, Наименование",
		ОбменКлиентСервер.Сущность_Организация(),
		XMLСтрока(ЭлементДанных.Организация),
		ЭлементДанных.Организация.Код,
		ЭлементДанных.Организация.Наименование);
		
	СтруктураДанных.Контрагент = Новый Структура("Тип, UUID, Код, Наименование",
		ОбменКлиентСервер.Сущность_Контрагент(),
		XMLСтрока(ЭлементДанных.Контрагент),
		ЭлементДанных.Контрагент.Код,
		ЭлементДанных.Контрагент.Наименование);
		
	СтруктураДанных.ДоговорКонтрагента = Новый Структура("Тип, UUID, Код, Наименование",
		ОбменКлиентСервер.Сущность_ДоговорКонтрагента(),
		XMLСтрока(ЭлементДанных.ДоговорКонтрагента),
		ЭлементДанных.ДоговорКонтрагента.Код,
		ЭлементДанных.ДоговорКонтрагента.Наименование);
		
	СтруктураДанных.ДатаЗаключенияДоговора = ЭлементДанных.ДатаЗаключенияДоговора;
	СтруктураДанных.ДатаОкончанияДоговора  = ЭлементДанных.ДатаОкончанияДоговора;
		
	СтруктураДанных.Комментарий = ЭлементДанных.Комментарий;
		
	// todo: синхронизация пользователей? Пока просто строка
	СтруктураДанных.Ответственный = Строка(ЭлементДанных.Ответственный);
			
	Возврат СтруктураДанных;
		
КонецФункции

Функция ВыгрузитьДополнительноеСоглашение(ЭлементДанных)
	
	СтруктураДанных = Новый Структура(
		"Тип, 
		|UUID, 
		|Дата, 
		|Номер, 
		|ДокументОснование,
		|Организация, 
		|Контрагент, 
		|ДоговорКонтрагента,		
		|ДатаЗаключенияДоговора,
		|ДатаОкончанияДоговора,
		|Комментарий,
		|Ответственный");
			
	СтруктураДанных.Тип = ОбменКлиентСервер.Сущность_ДополнительноеСоглашение();
	СтруктураДанных.UUID = XMLСтрока(ЭлементДанных);
	СтруктураДанных.Дата = XMLСтрока(ЭлементДанных.Дата);
	СтруктураДанных.Номер = XMLСтрока(ЭлементДанных.Номер);
	
	СтруктураДанных.ДокументОснование = Новый Структура("Тип, UUID, Дата, Номер",
		ОбменКлиентСервер.Сущность_ЗаключениеДоговораАренды(),
		XMLСтрока(ЭлементДанных.ДокументОснование),
		ЭлементДанных.ДокументОснование.Дата,
		ЭлементДанных.ДокументОснование.Номер);
	
	СтруктураДанных.Организация = Новый Структура("Тип, UUID, Код, Наименование",
		ОбменКлиентСервер.Сущность_Организация(),
		XMLСтрока(ЭлементДанных.Организация),
		ЭлементДанных.Организация.Код,
		ЭлементДанных.Организация.Наименование);
		
	СтруктураДанных.Контрагент = Новый Структура("Тип, UUID, Код, Наименование",
		ОбменКлиентСервер.Сущность_Контрагент(),
		XMLСтрока(ЭлементДанных.Контрагент),
		ЭлементДанных.Контрагент.Код,
		ЭлементДанных.Контрагент.Наименование);
		
	СтруктураДанных.ДоговорКонтрагента = Новый Структура("Тип, UUID, Код, Наименование",
		ОбменКлиентСервер.Сущность_ДоговорКонтрагента(),
		XMLСтрока(ЭлементДанных.ДоговорКонтрагента),
		ЭлементДанных.ДоговорКонтрагента.Код,
		ЭлементДанных.ДоговорКонтрагента.Наименование);
		
	СтруктураДанных.ДатаЗаключенияДоговора = ЭлементДанных.ДатаЗаключенияДоговора;
	СтруктураДанных.ДатаОкончанияДоговора  = ЭлементДанных.ДатаОкончанияДоговора;
		
	СтруктураДанных.Комментарий = ЭлементДанных.Комментарий;
		
	// todo: синхронизация пользователей? Пока просто строка
	СтруктураДанных.Ответственный = Строка(ЭлементДанных.Ответственный);
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ВыгрузитьРасторжениеДоговораАренды(ЭлементДанных)
	
	СтруктураДанных = Новый Структура(
		"Тип, 
		|UUID, 
		|Дата, 
		|Номер, 
		|ДокументОснование,
		|Организация, 
		|Контрагент, 
		|ДоговорКонтрагента,		
		|СуммаЗалога,
		|ДатаОкончанияДоговора,
		|Комментарий,
		|Ответственный");
			
	СтруктураДанных.Тип = ОбменКлиентСервер.Сущность_РасторжениеДоговораАренды();
	СтруктураДанных.UUID = XMLСтрока(ЭлементДанных);
	СтруктураДанных.Дата = XMLСтрока(ЭлементДанных.Дата);
	СтруктураДанных.Номер = XMLСтрока(ЭлементДанных.Номер);
	
	СтруктураДанных.ДокументОснование = Новый Структура("Тип, UUID, Дата, Номер",
		ОбменКлиентСервер.Сущность_ЗаключениеДоговораАренды(),
		XMLСтрока(ЭлементДанных.ДокументОснование),
		ЭлементДанных.ДокументОснование.Дата,
		ЭлементДанных.ДокументОснование.Номер);
	
	СтруктураДанных.Организация = Новый Структура("Тип, UUID, Код, Наименование",
		ОбменКлиентСервер.Сущность_Организация(),
		XMLСтрока(ЭлементДанных.Организация),
		ЭлементДанных.Организация.Код,
		ЭлементДанных.Организация.Наименование);
		
	СтруктураДанных.Контрагент = Новый Структура("Тип, UUID, Код, Наименование",
		ОбменКлиентСервер.Сущность_Контрагент(),
		XMLСтрока(ЭлементДанных.Контрагент),
		ЭлементДанных.Контрагент.Код,
		ЭлементДанных.Контрагент.Наименование);
		
	СтруктураДанных.ДоговорКонтрагента = Новый Структура("Тип, UUID, Код, Наименование",
		ОбменКлиентСервер.Сущность_ДоговорКонтрагента(),
		XMLСтрока(ЭлементДанных.ДоговорКонтрагента),
		ЭлементДанных.ДоговорКонтрагента.Код,
		ЭлементДанных.ДоговорКонтрагента.Наименование);
		
	СтруктураДанных.СуммаЗалога = ЭлементДанных.СуммаЗалога;
	СтруктураДанных.ДатаОкончанияДоговора  = ЭлементДанных.ДатаОкончанияДоговора;
		
	СтруктураДанных.Комментарий = ЭлементДанных.Комментарий;
		
	// todo: синхронизация пользователей? Пока просто строка
	СтруктураДанных.Ответственный = Строка(ЭлементДанных.Ответственный);
			
	Возврат СтруктураДанных;	
	
КонецФункции

Функция ВыгрузитьСчетНаАренду(ЭлементДанных)
	
	СтруктураДанных = Новый Структура(
		"Тип, 
		|UUID, 
		|Дата, 
		|Номер"); 
			
	СтруктураДанных.Тип = ОбменКлиентСервер.Сущность_СчетНаАренду();
	СтруктураДанных.UUID = XMLСтрока(ЭлементДанных);
	СтруктураДанных.Дата = XMLСтрока(ЭлементДанных.Дата);
	СтруктураДанных.Номер = XMLСтрока(ЭлементДанных.Номер);
	
	Возврат СтруктураДанных;
	
КонецФункции

#КонецОбласти