
#Область ПрограммныйИнтерфейс

// Выполняет предварительный анализ данных полученного сообщения обмена.
//
// Параметры:
//  Сообщение - Структура - Описание сообщения обмена;
//   * ИмяФайла               - Строка - Имя файла сообщения;
//   * ИдентификаторСообщения - УУИД - Уникальный идентификатор сообщения в регистре;
//  СведенияОЗагруженныхДанных - Структура - Описание загруженных данных.
// 
// Возвращаемое значение:
//  Число - Число объектов в файле.
//
Функция ПросмотретьСообщение(Сообщение, СведенияОЗагруженныхДанных) Экспорт

	ДатаПоследнейСинхронизации = Константы.ДатаПоследнегоОбновления.Получить();

	ЦентральныйУзелОбмена = ОбменВызовСервераПовтИсп.ПолучитьЦентральныйУзелОбмена();
	
	Ссылка   = Неопределено;
	Значение = Неопределено;
		
	Если Сообщение.Данные.Свойство("LogRecord") Тогда
		LogRecord = Сообщение.Данные.LogRecord;				
		ТипЗаписи = LogRecord.RecordType;
		Если ТипЗаписи = "Error" Тогда
			СведенияОЗагруженныхДанных.ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Сообщение.Данные.Свойство("Objects") Тогда
		Для Каждого Объект Из Сообщение.Данные.Objects Цикл
			Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(Объект.Тип, Объект.UUID);				
			
			ОбновитьСчетчикиКоллекций(Ссылка, Объект.Тип, СведенияОЗагруженныхДанных);
			ОбменВызовСервера.УвеличитьСчетчикиПоТипамОбъектов(СведенияОЗагруженныхДанных, Объект.Тип);
		КонецЦикла;
	КонецЕсли;
		
	Возврат СведенияОЗагруженныхДанных.ПоказателиОбмена.СчетчикиОбъектов.Количество() > 0
		ИЛИ СведенияОЗагруженныхДанных.ЕстьОшибки;

КонецФункции

// Выполняет запись данных полученного сообщения обмена.
//
// Параметры:
//  Сообщение - Структура - Описание сообщения обмена;
//    * ИмяФайла               - Строка - Имя файла сообщения;
//    * ИдентификаторСообщения - УУИД - Уникальный идентификатор сообщения в регистре;
//  СведенияОЗагруженныхДанных - Структура - Описание загруженных данных.
//
Процедура ОбработатьСообщение(Сообщение, СведенияОЗагруженныхДанных) Экспорт

	Попытка
		ЦентральныйУзелОбмена = ОбменВызовСервераПовтИсп.ПолучитьЦентральныйУзелОбмена();

		СведенияОЗагруженныхДанных.ПоказателиОбмена.КоличествоОбработанныхОбъектов = 
			СведенияОЗагруженныхДанных.ПоказателиОбмена.КоличествоОбработанныхОбъектов + 1;

		СсылкаНаЗагруженныйОбъект = Неопределено;

		Попытка
			ВыполнитьОбработку(
				Сообщение.Данные, СсылкаНаЗагруженныйОбъект, СведенияОЗагруженныхДанных);
		Исключение
			Инфо = ИнформацияОбОшибке();
			Если Сообщение.Свойство("LogRecord") Тогда
				ОбщееОписаниеОшибки = 
					НСтр("ru = 'Сервер сообщил об ошибке обработки данных.'
						|; en = 'An error occured on server while procesing data'");

				ТекстОшибки = 
					РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
						ОбщееОписаниеОшибки, ПодробноеПредставлениеОшибки(Инфо));

				// От сервера поступило сообщение об ошибке - необходимо корректно завершить 
				// обработку сообщения.
				РегистрыСведений.ПолученныеДанныеОбмена.УдалитьСообщение(Сообщение.ИдентификаторСообщения);
			Иначе				
				ОбщееОписаниеОшибки = 
					НСтр("ru = 'Произошла ошибка при обработке сообщения от сервера.'
						|; en = 'An error occured while procesing server messages'");

				ТекстОшибки = 
					РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
						ОбщееОписаниеОшибки, ПодробноеПредставлениеОшибки(Инфо));
			КонецЕсли;
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;

		// Для загруженных объектов удаляется регистрация изменений, чтобы они не передавались 
		// обратно на сервер.
		Если Не СсылкаНаЗагруженныйОбъект = Неопределено 
			Или ТипЗнч(СсылкаНаЗагруженныйОбъект) = Тип("УдалениеОбъекта") Тогда

			Попытка 
				МетаданныеОбъекта = СсылкаНаЗагруженныйОбъект.Метаданные();
			Исключение
				МетаданныеОбъекта = Неопределено;
			КонецПопытки;

			Если Не Метаданные = Неопределено 
				И Не Метаданные.ПланыОбмена.ОбменССервером.Состав.Найти(МетаданныеОбъекта) = Неопределено Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(ЦентральныйУзелОбмена, СсылкаНаЗагруженныйОбъект);
			КонецЕсли;
		КонецЕсли;

	Исключение
		Инфо = ИнформацияОбОшибке();
		МоментВремени = РегистрыСведений.ПротоколСобытий.ДобавитьОшибку(Инфо.Описание);
		РегистрыСведений.ПротоколСобытий.УстановитьНеобходимостьОтображенияПослеСинхронизации(
			МоментВремени, Истина);
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет инициацию загрузки конкретного объекта данных.
//
// Параметры:
//  СтруктураДанныхОбъекта		 - Соответствие - Список значений реквизитов объекта;
//  СсылкаНаЗагруженныйОбъект	 - Ссылка - Ссылка на загружаемый объект;
//  СведенияОЗагруженныхДанных	 - Структура - Кэш данных загруженных объектов.
//
Процедура ВыполнитьОбработку(Сообщение, СсылкаНаЗагруженныйОбъект, 
		СведенияОЗагруженныхДанных)

	СсылкаНаЗагруженныйОбъект = Неопределено;	
	МоментВремени = Неопределено;
	
	ОбменИмпорт.ЗаписатьОбъект(Сообщение, СведенияОЗагруженныхДанных, МоментВремени);
	
	Если МоментВремени <> Неопределено Тогда						
		РегистрыСведений.ПротоколСобытий.УстановитьНеобходимостьОтображенияПослеСинхронизации(
			МоментВремени, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет счетчики коллекций при загрузке данных.
//
// Параметры:
//  Ссылка						 - Ссылка - Ссылка на загружаемый объект;
//  Значение					 - Объект - Загружаемый объект, Неопределено, если он новый;
//  ИмяТипа						 - Строка - Имя типа загружаемого объекта;
//  СведенияОЗагруженныхДанных	 - Структура - Временные данные о текущей операции обмена.
//   * УдаляемыеДанные  - Соответствие - Список данных, которые будут удалены;
//   * НовыеДанные      - Соответствие - Список данных, которые будут загружены в первый раз;
//   * ПоказателиОбмена - Структура    - Статистические показатели текущей сессии обмена.
//
Процедура ОбновитьСчетчикиКоллекций(Ссылка, Знач Тип, СведенияОЗагруженныхДанных)

	// todo
	Значение = Неопределено;
	
	Если Не Ссылка = Неопределено И Не Ссылка.Пустая() Тогда
		СсылкаПодлежитУдалению = 
			СведенияОЗагруженныхДанных.УдаляемыеДанные.Получить(Ссылка.УникальныйИдентификатор()) <> Неопределено;

		Если СсылкаПодлежитУдалению Тогда
			Возврат;
		КонецЕсли;

		// Добавим объект в список новых данных которые будут загружены
		СведенияОЗагруженныхДанных.НовыеДанные.Вставить(
			Ссылка, ?(Значение = Неопределено, Ссылка, Значение));

		// Обновляем счетчики новых объектов для информирования пользователя
		Коллекция = Неопределено;
		Тип = НРег(Тип); 
		
		// Справочники
		Если Тип = НРег(ОбменКлиентСервер.Сущность_Город()) Тогда
			Коллекция = "НовыеГорода";
			
		ИначеЕсли Тип = НРег(ОбменКлиентСервер.Сущность_Контрагент()) Тогда
			Коллекция = "НовыеКонтрагенты";
			
		ИначеЕсли Тип = НРег(ОбменКлиентСервер.Сущность_ОбъектСтроительства()) Тогда
			Коллекция = "НовыеОбъектыСтроительства";
			
		ИначеЕсли Тип = НРег(ОбменКлиентСервер.Сущность_СтатьяРасходов()) Тогда
			Коллекция = "НовыеСтатьиРасходов";
			
		// Документы			
		ИначеЕсли Тип = НРег(ОбменКлиентСервер.Сущность_СписаниеДенежныхСредств()) Тогда
			Коллекция = "НовыеСписанияДенежныхСредств";
						
		КонецЕсли;

		Объект = Ссылка.ПолучитьОбъект();
		Если НЕ Коллекция = Неопределено И Объект = Неопределено Тогда
			СведенияОЗагруженныхДанных.ПоказателиОбмена[Коллекция] = 
				СведенияОЗагруженныхДанных.ПоказателиОбмена[Коллекция] + 1;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
