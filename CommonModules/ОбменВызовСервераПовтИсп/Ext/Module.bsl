
#Область ПрограммныйИнтерфейс

// Получает текущую версию сервиса которая будет использоваться в сессии обмена.
// 
// Возвращаемое значение:
//  Строка - Используемая для обмена версия сервиса.
//
Функция ПолучитьВерсиюСервиса() Экспорт

	// Если вызов функции не первый, то получим версию сохраненную ранее
	ВерсияСервиса = ПараметрыСеанса.ВерсияСервиса;
	Если ЗначениеЗаполнено(ВерсияСервиса) Тогда
		Возврат ВерсияСервиса;
	КонецЕсли;

	// Если вызов функции в сеансе обмена первый раз, проверяем подключались ли мы уже ранее,
	// и если да, то установим версию этого подключению в качестве используемой.
	ИспользуемаяВерсияФорматаОбмена = Константы.ИспользуемаяВерсияФорматаОбмена.Получить();
	Если ЗначениеЗаполнено(ИспользуемаяВерсияФорматаОбмена) Тогда

		ТекстИнформации = 
			СтрШаблон(
				НСтр("ru = 'Ранее использующаяся версия: %1'; en = 'Previously used version: %1'"),
				ИспользуемаяВерсияФорматаОбмена);

		РегистрыСведений.ПротоколСобытий.ДобавитьИнформацию(ТекстИнформации);

	КонецЕсли;

	РегистрыСведений.ПротоколСобытий.ДобавитьИнформацию(
		НСтр("ru = 'Начато получение версии сервиса'; en = 'Started getting version of the service'"));

	Адрес = СокрЛП(Константы.АдресЦентральнойБазы.Получить());
	Если Адрес = "" 
	 Или НРег(Адрес) = "http://" 
	 Или НРег(Адрес) = "https://" Тогда

		МоментВремени = РегистрыСведений.ПротоколСобытий.ДобавитьОшибку(
			НСтр("ru = 'Не удалось получить версию сервиса, т.к. адрес не задан'"));

		РегистрыСведений.ПротоколСобытий.УстановитьНеобходимостьОтображенияПослеСинхронизации(
			МоментВремени, Истина);

		Возврат Неопределено;

	КонецЕсли;

	Пользователь = СокрЛП(Константы.ПользовательЦентральнойБазы.Получить());
	Пароль = Константы.ПарольПользователя.Получить();
	Адрес = НормализоватьАдресПриОтсутствииПрефикса(Адрес);

	Если ОбменВызовСервераПовтИсп.ИспользоватьРасширенноеПротоколированиеОпераций() Тогда

		ТекстСообщения = 
			НСтр("ru = 'Адрес: %1
				|Пользователь: %2';
				|en = 'Addres: %1
				|User: %2'");

		ТекстСообщения = СтрШаблон(
			ТекстСообщения, Адрес, Пользователь);

		РегистрыСведений.ПротоколСобытий.ДобавитьИнформацию(ТекстСообщения);

	КонецЕсли;

	// Добавление адресов для обратной совместимости
	АдресСервиса = Адрес + "/hs/mobile/version";
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресСервиса);
	
	Соединение = Неопределено;
	
	Попытка
		Если ОбменВызовСервераПовтИсп.ИспользоватьРасширенноеПротоколированиеОпераций() Тогда
			РегистрыСведений.ПротоколСобытий.ДобавитьИнформацию(АдресСервиса);
		КонецЕсли;
		
		Соединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт, Пользователь, Пароль, , 60);		
	Исключение
		Инфо = ИнформацияОбОшибке();
		ПодробноеОписание = ПодробноеПредставлениеОшибки(Инфо);
		Если ОбменВызовСервераПовтИсп.ИспользоватьРасширенноеПротоколированиеОпераций() Тогда
			ОбщееОписаниеОшибки = 
				НСтр("ru = 'При попытке подключения к сервису версий произошла ошибка.'
					|; en = 'An error occured while connection to version services'");

			ТекстОшибки = 
				РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
					ОбщееОписаниеОшибки, ПодробноеОписание);

			РаботаСПротоколомСобытийВызовСервера.ДобавитьОшибку(ТекстОшибки);
		КонецЕсли;
	КонецПопытки;

	Если Соединение = Неопределено Тогда
		ТекстСообщения = 
			НСтр("ru = 'Не удалось подключиться к сервису версий.
				|Проверьте настройки подключения и попробуйте подключиться снова.'");
		
		ТекстОшибки = 
			РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
				ТекстСообщения, ПодробноеОписание);

		РаботаСПротоколомСобытийВызовСервера.ДобавитьОшибку(ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	Иначе
		РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(
			СтрШаблон(
				НСтр("ru = 'Адрес сервиса: %1'; en = 'Server addres: %1'"), 
				АдресСервиса));

	КонецЕсли;

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	ОтветСервера = Соединение.Получить(Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, Заголовки));
		
	Если ОтветСервера.КодСостояния <> 200 Тогда
		Если ОтветСервера.КодСостояния = 401 Тогда
			ТекстСообщения = 
				НСтр("ru = 'Неверные имя пользователя или пароль. 
					|Проверьте настройки подключения и попробуйте снова.'");
			
		Иначе
			ТекстСообщения = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(			
					НСтр("ru = 'Код ответа сервера: %1; %2'"),
						ОтветСервера.КодСостояния,
						ОтветСервера.ПолучитьТелоКакСтроку());
		КонецЕсли;
		
		ТекстОшибки = 
			РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
				ТекстСообщения, ПодробноеОписание);

		РаботаСПротоколомСобытийВызовСервера.ДобавитьОшибку(ТекстОшибки);
		ВызватьИсключение ТекстОшибки;			
	КонецЕсли;
	
	ОтветСервераДанные = ОбщегоНазначенияСервер.ОбъектИзJSON(ОтветСервера.ПолучитьТелоКакСтроку());
	Если Не ОтветСервераДанные.Свойство("version") Тогда
		ТекстСообщения = 
			НСтр("ru = 'Получен неверный ответ сервера'");
		
		ТекстОшибки = 
			РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
				ТекстСообщения, ПодробноеОписание);

		РаботаСПротоколомСобытийВызовСервера.ДобавитьОшибку(ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ВерсияСервера  = ОтветСервераДанные.version;
	ВерсияКлиента  = Константы.ПоддерживаемыеВерсииФорматаОбмена.Получить();

	ВерсииПоддерживаемыеСервером = СтрРазделить(ВерсияСервера, ",");
	ВерсииПоддерживаемыеКлиентом = СтрРазделить(ВерсияКлиента, ",");

	ТекстСообщения = 
		НСтр("ru = 'Рабочие версии сервера: %1
			|Рабочие версии клиента: %2'; 
			|en = 'Available version of the server: %1
			|available version of the client: %2'");

	РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(
		СтрШаблон(ТекстСообщения, ВерсияСервера,ВерсияКлиента));

	Для Счетчик = 0 По ВерсииПоддерживаемыеСервером.ВГраница() Цикл
		Индекс = ВерсииПоддерживаемыеСервером.ВГраница()-Счетчик;

		Если ВерсииПоддерживаемыеКлиентом.Найти(ВерсииПоддерживаемыеСервером[Индекс]) <> Неопределено Тогда

			// Проверим, что выбранная версия не ниже ранее использовавшейся.
			Если ЗначениеЗаполнено(ИспользуемаяВерсияФорматаОбмена) 
				И ИспользуемаяВерсияФорматаОбмена > ВерсииПоддерживаемыеСервером[Индекс] Тогда

				ТекстОшибки = 
					СтрШаблон(
						НСтр("ru = 'Ошибка при подключении.
							|Нельзя подключиться выбранной версией формата (%1), так как ранее 
							|уже было осуществлено подключение с более старшей версией (%2). 
							|Попробуйте выполнить подключение снова.'; 
							|en = 'Connection error
							|Used service version (%1) less than used previously (%2)
							|Try again leter'"),
						ВерсииПоддерживаемыеСервером[Индекс], ИспользуемаяВерсияФорматаОбмена);

				РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(ТекстОшибки);

				ВызватьИсключение ТекстОшибки;

			КонецЕсли;

			ПараметрыСеанса.ВерсияСервиса = ВерсииПоддерживаемыеСервером[Индекс];
			Константы.ИспользуемаяВерсияФорматаОбмена.Установить(ВерсииПоддерживаемыеСервером[Индекс]);

			Если ВерсииПоддерживаемыеСервером[Индекс] > ИспользуемаяВерсияФорматаОбмена Тогда
				РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(
					СтрШаблон(
						НСтр("ru = 'Используемая версия сервиса (%1) обновлена (%2)'; 
							|en = 'Used service version (%1) updated (%2)'"), 
						ИспользуемаяВерсияФорматаОбмена, ВерсииПоддерживаемыеСервером[Индекс]));
			Иначе
				РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(
					СтрШаблон(
						НСтр("ru = 'Используемая версия сервиса: %1'; en = 'Service version used: %1'"), 
						ВерсииПоддерживаемыеСервером[Индекс]));
			КонецЕсли;

			Возврат ВерсииПоддерживаемыеСервером[Индекс];

		КонецЕсли;
	КонецЦикла;

	ПараметрыСеанса.ВерсияСервиса = ИспользуемаяВерсияФорматаОбмена;

	ТекстИсключения = 
		СтрШаблон(
			НСтр("ru = 'Приложение не поддерживает данную версию сервера ДО (%1).
				|Необходимо обновить сервер до версии или использовать клиент версии 0.0.1'"),
			ИспользуемаяВерсияФорматаОбмена);

	ВызватьИсключение ТекстИсключения;

КонецФункции

Функция ПолучитьСоединение(СостояниеОбмена) Экспорт
	
	РегистрыСведений.ПротоколСобытий.ДобавитьИнформацию(НСтр("ru = 'Начало получения соединения'"));

	ВерсияСервиса = ПараметрыСеанса.ВерсияСервиса;
	Если Не ЗначениеЗаполнено(ВерсияСервиса) Тогда
		ВерсияСервиса = ПолучитьВерсиюСервиса();
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ВерсияСервиса) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Адрес = СокрЛП(Константы.АдресЦентральнойБазы.Получить());
	Пользователь = СокрЛП(Константы.ПользовательЦентральнойБазы.Получить());
	Пароль = Константы.ПарольПользователя.Получить();

	// Удаляем из адреса финишный слэш - т.к. он у нас есть в описании сервиса ниже.
	// В противном случае будет ошибка при подключении.
	Если СтрЗаканчиваетсяНа(Адрес, "/") Тогда
		Адрес = Лев(Адрес, СтрДлина(Адрес)-1);
	КонецЕсли;

	Если Адрес = "" Тогда
		СостояниеОбмена.ЕстьОшибки = Истина;
		Возврат Неопределено;
	КонецЕсли;

	Соединение = 
		ОбменВызовСервераПовтИсп.ПолучитьСоединениеДляОбмена(
			Адрес, Пользователь, Пароль);
	
	РегистрыСведений.ПротоколСобытий.ДобавитьИнформацию(НСтр("ru = 'Установлено соединение с основной базой'"));

	ДанныеОСоединении = Новый Структура;
	ДанныеОСоединении.Вставить("Соединение", Соединение);
	ДанныеОСоединении.Вставить("ВерсияСервиса", ВерсияСервиса);

	Возврат ДанныеОСоединении;
		
КонецФункции

Функция ПолучитьСоединениеДляОбмена(Адрес, Пользователь, Пароль) Экспорт
	
	Адрес = НормализоватьАдресПриОтсутствииПрефикса(Адрес);
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Адрес);	
	Соединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт, Пользователь, Пароль, , 120);
	
	Возврат Соединение;	
	
КонецФункции

// Возвращает флаг использования расширенного протокола.
// 
// Возвращаемое значение:
//  Булево - Признак использования подробного протоколирования операций.
//
Функция ИспользоватьРасширенноеПротоколированиеОпераций() Экспорт

	Возврат Константы.ПодробнаяИнформацияОСинхронизации.Получить();

КонецФункции


// Получает узел обмена, на котором регистрируются изменения данных для отправки на сервер.
// 
// Возвращаемое значение:
//  ПланыОбменаСсылка.ОбменССервером - Ссылка на узле регистрации данных для обмена.
//
Функция ПолучитьЦентральныйУзелОбмена() Экспорт

	ЦентральныйУзелОбмена = ПланыОбмена.ОбменССервером.НайтиПоКоду(Константы.КодУстройства.Получить());

	Если ЦентральныйУзелОбмена.Пустая() Тогда

		НовыйУзел = ПланыОбмена.ОбменССервером.СоздатьУзел();
		НовыйУзел.Код          = Константы.КодУстройства.Получить();
		НовыйУзел.Наименование = НСтр("ru = 'Центральный'; en = 'General'");
		НовыйУзел.Записать();

		ЦентральныйУзелОбмена = НовыйУзел.Ссылка;

	КонецЕсли;

	Возврат ЦентральныйУзелОбмена;

КонецФункции


// Получает представление типа объекта для выгрузки
//
// Параметры:
//  ЭлементДанных - ДокументСсылка.ВходящееПисьмо - Выгружаемый элемент данных.
// 
// Возвращаемое значение:
//  Строка - тип объекта строкой подготовленный к выгрузке.
//
Функция ПолучитьПредставлениеТипаПоСсылке(ЭлементДанных) Экспорт

	Если ТипЗнч(ЭлементДанных) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
		Тип = "IncomingMail";
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		Тип = "OutgoingMail";
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
		Тип = "CalendarEvent";
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.Задачи") Тогда
		Тип = "Task";
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.ПроцессыИсполнение") Тогда
		Тип = "ExecutionProcess";

	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.УчетныеЗаписи") Тогда
		Тип = "MailAccount";
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.ПапкиПисем") Тогда
		Тип = "MailFolder";

	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.Пользователи") Тогда
		Тип = "User";
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		Тип = "Role";
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.Файлы") Тогда
		Тип = "File";
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.ВеткиПереписки") Тогда
		Тип = "MailThread";
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.АдресатыПочтовыхСообщений") Тогда
		Тип = "Addressee";
	Иначе
		Тип = "ActionTarget";
	КонецЕсли;

	Возврат Тип;

КонецФункции

// Получает ссылку из БД по указанному представлению типа и УИД.
//
// Параметры:
//  ТипЗначения   - Строка - Представление типа;
//  Идентификатор - УникальныйИдентификатор - УникальныйИдентификатор объекта;
// 
// Возвращаемое значение:
//  Ссылка - Ссылка на объект.
//
Функция ПолучитьСсылкуПоТипу(Знач ТипЗначения, Знач Идентификатор) Экспорт

	Если Не ЗначениеЗаполнено(ТипЗначения) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Идентификатор = УникальныйИдентификаторПустой() 
		Или Идентификатор = Неопределено 
		Или Идентификатор = ""Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Идентификатор = Новый УникальныйИдентификатор(Идентификатор);
	КонецЕсли;

	ТипЗначения = НРег(ТипЗначения);
	
	// Справочники
	
	Если ТипЗначения = НРег(ОбменКлиентСервер.Сущность_Город()) Тогда
		Возврат Справочники.Города.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли ТипЗначения = НРег(ОбменКлиентСервер.Сущность_Контрагент()) Тогда
		Возврат Справочники.Контрагенты.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли ТипЗначения = НРег(ОбменКлиентСервер.Сущность_ОбъектСтроительства()) Тогда
		Возврат Справочники.Объекты.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли ТипЗначения = НРег(ОбменКлиентСервер.Сущность_СтатьяРасходов()) Тогда
		Возврат Справочники.СтатьиРасходов.ПолучитьСсылку(Идентификатор);
		
	// Документы
		
	ИначеЕсли ТипЗначения = НРег(ОбменКлиентСервер.Сущность_СписаниеДенежныхСредств()) Тогда		
		Возврат Документы.СписаниеДенежныхСредств.ПолучитьСсылку(Идентификатор);
				
	Иначе
		ВызватьИсключение СтрШаблон("Тип не определен (%1)", ТипЗначения);
	КонецЕсли;

КонецФункции

Функция СоздатьОбъектПоТипу(Знач ТипЗначения) Экспорт
	
	// todo: проверить
	Результат = Неопределено;
	
	Если ТипЗначения = ОбменКлиентСервер.Сущность_Город() Тогда
		Результат = Справочники.Города.СоздатьЭлемент();
		
	ИначеЕсли ТипЗначения = ОбменКлиентСервер.Сущность_Контрагент() Тогда
		Результат = Справочники.Контрагенты.СоздатьЭлемент();
		
	ИначеЕсли ТипЗначения = ОбменКлиентСервер.Сущность_ОбъектСтроительства() Тогда
		Результат = Справочники.Объекты.СоздатьЭлемент();
		
	Иначе
		ВызватьИсключение СтрШаблон("Тип не определен (%1)", ТипЗначения);
	КонецЕсли;
		
	Возврат Результат;
		
КонецФункции



// Получает важность задачи по представлению
//
// Параметры:
//  Представление - Строка - Идентификатор значения в обмене.
// 
// Возвращаемое значение:
//  Перечисления.ВариантыВажностиЗадачи - Важность задачи.
//
Функция ПолучитьВажностьЗадачиПоПредставлению(Представление) Экспорт

	Если Представление = "low" Тогда
		Важность = Перечисления.ВариантыВажностиЗадачи.Низкая;
	ИначеЕсли Представление = "high" Тогда
		Важность = Перечисления.ВариантыВажностиЗадачи.Высокая;
	Иначе
		Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	КонецЕсли;

	Возврат Важность;

КонецФункции

// Получить представление важности задачи для обмена.
//
// Параметры:
//  Значение - Перечисления.ВариантыВажностиЗадачи - Важность задачи.
// 
// Возвращаемое значение:
//  Строка - Идентификатор перечисления для обмена.
//
Функция ПолучитьПредставлениеВажностиЗадачи(Значение) Экспорт

	Если Значение = Перечисления.ВариантыВажностиЗадачи.Низкая Тогда
		Представление = "low";

	ИначеЕсли Значение = перечисления.ВариантыВажностиЗадачи.Высокая Тогда
		Представление = "high";

	Иначе
		Представление = "normal";

	КонецЕсли;

	Возврат Представление;

КонецФункции


// Получает идентификатор частоты повторения по значению перечисления.
//
// Параметры:
//  ЧастотаПовторения - Перечисления.ЧастотаПовторения - Частота повторения.
// 
// Возвращаемое значение:
//  Строка - Идентификатор перечисления.
//
Функция ПолучитьПредставлениеЧастотыПовторений(ЧастотаПовторения) Экспорт

	Если ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежедневно Тогда
		Представление = "daily";
	ИначеЕсли ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно Тогда
		Представление = "weekly";
	ИначеЕсли ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно Тогда
		Представление = "monthly";
	ИначеЕсли ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно Тогда
		Представление = "yearly";
	КонецЕсли;

	Возврат Представление;

КонецФункции


// Получает частоту представления по идентификатору обмена.
//
// Параметры:
//  Представление - Строка - Идентификатор перечисления.
// 
// Возвращаемое значение:
//  Перечисления.ЧастотаПовторения - Частота повторения.
//
Функция ПолучитьЧастотуПоПредставлению(Представление) Экспорт

	Если СтрСравнить(Представление, "daily") = 0 Тогда
		ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежедневно;

	ИначеЕсли СтрСравнить(Представление, "weekly") = 0 Тогда
		ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно;

	ИначеЕсли СтрСравнить(Представление, "monthly") = 0 Тогда
		ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно;

	ИначеЕсли СтрСравнить(Представление, "yearly") = 0 Тогда
		ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно;

	КонецЕсли;

	Возврат ЧастотаПовторения;

КонецФункции

// Получает представление цвета по значению перечисления.
//
// Параметры:
//  Представление - Строка - строковое представление цвета.
// 
// Возвращаемое значение:
//  Перечисления.ЦветаОбъектов - Цвет объекта.
//
Функция ПолучитьЦветПоПредставлению(Представление) Экспорт

	Если СтрСравнить(Представление, "red") = 0 Тогда
		Цвет = Перечисления.ЦветаОбъектов.Красный;

	ИначеЕсли СтрСравнить(Представление, "blue") = 0 Тогда
		Цвет = Перечисления.ЦветаОбъектов.Синий;

	ИначеЕсли СтрСравнить(Представление, "yellow") = 0 Тогда
		Цвет = Перечисления.ЦветаОбъектов.Желтый;

	ИначеЕсли СтрСравнить(Представление, "green") = 0 Тогда
		Цвет = Перечисления.ЦветаОбъектов.Зеленый;

	ИначеЕсли СтрСравнить(Представление, "orange") = 0 Тогда
		Цвет = Перечисления.ЦветаОбъектов.Оранжевый;

	ИначеЕсли СтрСравнить(Представление, "purple") = 0 Тогда
		Цвет = Перечисления.ЦветаОбъектов.Лиловый;

	Иначе
		Цвет = Перечисления.ЦветаОбъектов.Нет;

	КонецЕсли;

	Возврат Цвет;

КонецФункции

// Получает представление цвета по значению перечисления
//
// Параметры:
//  Цвет -  Перечисления.ЦветаОбъектов - Цвет рабочего календаря.
// 
// Возвращаемое значение:
//  Строка - Идентификатор значения для обмена.
//
Функция ПолучитьПредставлениеЦвета(Цвет) Экспорт

	Если Цвет = Перечисления.ЦветаОбъектов.Красный Тогда
		Представление = "red";
	ИначеЕсли Цвет = Перечисления.ЦветаОбъектов.Синий Тогда
		Представление = "blue";
	ИначеЕсли Цвет = Перечисления.ЦветаОбъектов.Желтый Тогда
		Представление = "yellow";
	ИначеЕсли Цвет = Перечисления.ЦветаОбъектов.Зеленый Тогда
		Представление = "green";
	ИначеЕсли Цвет = Перечисления.ЦветаОбъектов.Оранжевый Тогда
		Представление = "orange";
	ИначеЕсли Цвет = Перечисления.ЦветаОбъектов.Лиловый Тогда
		Представление = "purple";
	Иначе
		Представление = "none";
	КонецЕсли;

	Возврат Представление;

КонецФункции

// Заполняет индекс картинки по цвету
//
// Параметры:
//  Цвет - Перечисления.ЦветаОбъектов - Цвет объекта.
// 
// Возвращаемое значение:
//  Число - Индекс картинки в ОбщаяКартинка.КоллекцияЦвет.
//
Функция ПолучитьИндексКартинкиПоЦвету(Цвет) Экспорт

	Если Цвет = Перечисления.ЦветаОбъектов.Нет Тогда
		Возврат 0;

	ИначеЕсли Цвет = Перечисления.ЦветаОбъектов.Красный Тогда
		Возврат 1;

	ИначеЕсли Цвет = Перечисления.ЦветаОбъектов.Синий Тогда
		Возврат 2;

	ИначеЕсли Цвет = Перечисления.ЦветаОбъектов.Желтый Тогда
		Возврат 3;

	ИначеЕсли Цвет = Перечисления.ЦветаОбъектов.Зеленый Тогда
		Возврат 4;

	ИначеЕсли Цвет = Перечисления.ЦветаОбъектов.Оранжевый Тогда
		Возврат 5;

	КонецЕсли;

КонецФункции


// Получает представление типа записи календаря
//
// Параметры:
//  ТипЗаписиКалендаря - Перечисления.ТипЗаписиКалендаря - Тип записи календаря.
// 
// Возвращаемое значение:
//  Строка - Идентификатор типа записи.
//
Функция ПолучитьПредставлениеТипаЗаписиКалендаря(ТипЗаписиКалендаря) Экспорт

	Если ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие Тогда
		Представление = "event";

	ИначеЕсли ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		Представление = "recurrence";

	ИначеЕсли ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия Тогда
		Представление = "recurrenceException";

	Иначе
		Представление = "event";

	КонецЕсли;

	Возврат Представление;

КонецФункции

// Получает тип записи календаря по его представлению
//
// Параметры:
//  Представление - Строка - Идентификатор типа записи.
// 
// Возвращаемое значение:
//  Перечисления.ТипЗаписиКалендаря - Тип записи значением.
//
Функция ПолучитьТипаЗаписиКалендаряПоПредставлению(Представление) Экспорт

	Если СтрСравнить(Представление, "event") = 0 Тогда
		ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие;

	ИначеЕсли СтрСравнить(Представление, "recurrence") = 0 Тогда
		ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие;

	ИначеЕсли СтрСравнить(Представление, "recurrenceException") = 0 Тогда
		ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия;

	Иначе
		ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие;

	КонецЕсли;

	Возврат ТипЗаписиКалендаря;

КонецФункции


// Получает состояние записи по идентификатору.
//
// Параметры:
//  Представление	 - Строка - Идентификатор перечисления в обмене.
// 
// Возвращаемое значение:
//  Перечисления.СостоянияЗаписейРабочегоКалендаря - Состояние записи календаря.
//
Функция ПолучитьСостояниеЗаписиПоПредставлению(Представление) Экспорт

	Если СтрСравнить(Представление, "confirmed") = 0 Тогда
		Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Принято;

	ИначеЕсли СтрСравнить(Представление, "cancelled") = 0 Тогда
		Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Отклонено;

	ИначеЕсли СтрСравнить(Представление, "tentative") = 0 Тогда
		Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом;

	Иначе
		Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом;
	КонецЕсли;

	Возврат Состояние;

КонецФункции

// Получает представление цвета по значению перечисления.
//
// Параметры:
//  Состояние - Перечисления.СостоянияЗаписейРабочегоКалендаря - Ссылка на значение перечисления 
//                                                               типа СостоянияЗаписейРабочегоКалендаря.
// 
// Возвращаемое значение:
//  Строка - Идентификатор состояния.
//
Функция ПолучитьПредставлениеСостоянияЗаписиРабочегоКалендаря(Состояние) Экспорт

	Если Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Принято Тогда
		Представление = "confirmed";

	ИначеЕсли Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Отклонено Тогда
		Представление = "cancelled";

	ИначеЕсли Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом Тогда
		Представление = "tentative";

	Иначе
		Представление = "tentative";

	КонецЕсли;

	Возврат Представление;

КонецФункции


// Получает строковое представление состояния бизнес процесса для обмена.
//
// Параметры:
//  Значение -  Перечисление.СостоянияБизнесПроцессов - Состояние бизнес-процесса.
// 
// Возвращаемое значение:
//  Строка - Строковый идентификатор перечисления для обмена.
//
Функция ПолучитьПредставлениеСостоянияБизнесПроцесса(Значение) Экспорт

	Если Значение = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
		Результат = "Stopped";

	ИначеЕсли Значение = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
		Результат = "Terminated";

	Иначе
		Результат = "Active";

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Получает состояние бизнес процесса по идентификатору обмена.
//
// Параметры:
//  Представление	 - Строка - Идентификатор значения в обмене.
// 
// Возвращаемое значение:
//  Перечисления.СостоянияБизнесПроцессов - Состояние бизнес-процесса.
//
Функция ПолучитьСостояниеБизнесПроцессаПоПредставлению(Представление) Экспорт

	Если СтрСравнить(Представление, "Stopped") = 0 Тогда
		Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен;

	ИначеЕсли СтрСравнить(Представление, "Terminated") = 0 Тогда
		Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван;

	Иначе
		Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;

	КонецЕсли;

	Возврат Состояние;

КонецФункции


// Получает представление правила окончания повторения записи календаря.
//
// Параметры:
//  ПравилоОкончанияПовторения - Перечисления.ПравилаОкончанияПовторения - Ссылка на значение 
//                                               перечисления типа ПравилаОкончанияПовторения.
// 
// Возвращаемое значение:
//  Строка - Идентификатор правила.
//
Функция ПолучитьПредставлениеПравилаОкончанияПовторения(ПравилоОкончанияПовторения) Экспорт

	Если ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.Никогда Тогда
		Представление = "never";

	ИначеЕсли ПравилоОкончанияПовторения = 
			Перечисления.ПравилаОкончанияПовторения.ПослеЧислаПовторов Тогда
		Представление = "byCount";

	ИначеЕсли ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ДоДаты Тогда
		Представление = "byDate";

	КонецЕсли;

	Возврат Представление;

КонецФункции

// Получает тип правила окончания повторения записи календаря по его представлению.
//
// Параметры:
//  Представление - Строка - строковое представление правила окончания повторения.
//
// Возвращаемое значение:
//  Перечисления.ПравилаОкончанияПовторения - Значение перечисления.
//
Функция ПолучитьПравилоОкончанияПовторенияПоПредставлению(Представление) Экспорт

	Если СтрСравнить(Представление, "never") = 0 Тогда
		ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.Никогда;

	ИначеЕсли СтрСравнить(Представление, "byCount") = 0 Тогда
		ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ПослеЧислаПовторов;

	ИначеЕсли СтрСравнить(Представление, "byDate") = 0 Тогда
		ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ДоДаты;

	КонецЕсли;

	Возврат ПравилоОкончанияПовторения;

КонецФункции


// Получает оценку результата выполнения по представлению в обмене.
//
// Параметры:
//  Представление	 - Строка - Значение перечисления в обмене.
// 
// Возвращаемое значение:
//  Перечисления.ОценкиРезультатаВыполнения - Результат выполнения задачи.
//
Функция ПолучитьОценкуРезультатаВыполненияПоПредставлению(Представление) Экспорт

	Если СтрСравнить(Представление, "ExecutedNeutral") = 0 Тогда
		ОценкаРезультата = Перечисления.ОценкиРезультатаВыполнения.ВыполненоНейтрально;

	ИначеЕсли СтрСравнить(Представление, "ExecutedPositive") = 0 Тогда
		ОценкаРезультата = Перечисления.ОценкиРезультатаВыполнения.ВыполненоПоложительно;

	ИначеЕсли СтрСравнить(Представление, "ExecutedAlmostPositive") = 0 Тогда
		ОценкаРезультата = Перечисления.ОценкиРезультатаВыполнения.ВыполненоПоложительноСЗамечаниями;

	ИначеЕсли СтрСравнить(Представление, "ExecutedNegative") = 0 Тогда
		ОценкаРезультата = Перечисления.ОценкиРезультатаВыполнения.ВыполненоОтрицательно;

	КонецЕсли;

	Возврат ОценкаРезультата;

КонецФункции

// Получает строковое представление типа события протокола для обмена.
//
// Параметры:
//  Значение - Перечисления.ТипыСобытийПротокола - Тип события протокола.
// 
// Возвращаемое значение:
//  Строка - Строковый идентификатор перечисления для обмена.
//
Функция ПолучитьПредставлениеТипаСобытияПротокола(Значение) Экспорт

	Если Значение = Перечисления.ТипыСобытийПротокола.Предупреждение Тогда
		Представление = "Warning";

	ИначеЕсли Значение = Перечисления.ТипыСобытийПротокола.Ошибка Тогда
		Представление = "Error";

	Иначе
		Представление = "Information";

	КонецЕсли;

	Возврат Представление;

КонецФункции

// Возвращает тип ответа на письмо по его представлению.
//
// Параметры:
//  Представление - Строка - Строковый идентификатор значения перечисления.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыОтвета - Полученный тип ответа.
//
Функция ПолучитьТипОтветаНаПисьмоПоПредставлению(Представление) Экспорт

	Если СтрСравнить(Представление, "ОтветНаПисьмо") = 0 Тогда
		Возврат Перечисления.ТипыОтвета.ОтветНаПисьмо;

	ИначеЕсли СтрСравнить(Представление, "ПересылкаПисьма") = 0 Тогда
		Возврат Перечисления.ТипыОтвета.ПересылкаПисьма;

	Иначе
		Возврат Перечисления.ТипыОтвета.ПустаяСсылка();

	КонецЕсли;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет наличие префикса http или https и подставляет http в адрес если их нет
//
// Параметры:
//  Адрес	 - Строка - Адрес подключения к серверу.
// 
// Возвращаемое значение:
//  Строка - нормализованный адрес подключения.
//
Функция НормализоватьАдресПриОтсутствииПрефикса(Адрес)

	АдресДляПроверки = НРег(Адрес);
	Если СтрНайти(АдресДляПроверки, "http://") = 0 
		И СтрНайти(АдресДляПроверки, "https://") = 0 Тогда
		Возврат "http://" + Адрес;
	Иначе
		Возврат Адрес;
	КонецЕсли;

КонецФункции

// Формирует расширенное описание ошибки возникшей при подключении.
//
// Параметры:
//  Инфо - ИнформацияОбОшибке - Полученная информация об ошибке во время обмена.
// 
// Возвращаемое значение:
//  Строка - расширенное описание ошибки.
//
Функция СформироватьОписаниеОшибкиПриПодключении(Инфо)

	ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(Инфо);

	Если СтрНайти(ПодробноеПредставлениеОшибки, "Аутентификация пользователя не выполнена") > 0 Тогда

		ОбщееОписаниеОшибки = 
			НСтр("ru = '<b>Не удалось подключиться. Аутентификация пользователя не выполнена.
				|Проверьте имя пользователя и пароль и повторите попытку.</b>'
				|; en = '<b>Can''t connect to server. User authentication failed.
				|Check user name and password and try again later</b>'");

		ТекстОшибки = 
			РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
				ОбщееОписаниеОшибки, ПодробноеПредставлениеОшибки);

	ИначеЕсли ЗначениеЗаполнено(Константы.ДатаПоследнегоОбновления.Получить()) Тогда

		ОбщееОписаниеОшибки = 
			НСтр("ru = '<b>Не удалось подключиться.
				|Проверьте интернет-соединение и повторите попытку</b>'
				|; en = '<b>Can''t connect to server
				|Check internet connection and try again later</b>'");

		ТекстОшибки = 
			РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
				ОбщееОписаниеОшибки, ПодробноеПредставлениеОшибки);

	ИначеЕсли СтрНайти(Инфо.Причина.Описание, "Код ответа сервера: ") > 0 Тогда

		ТекстСообщения = НСтр("ru = 'Код ответа сервера: '");
		Позиция   = СтрНайти(Инфо.Причина.Описание, ТекстСообщения) + СтрДлина(ТекстСообщения);
		КодОшибки = Сред(Инфо.Причина.Описание, Позиция, 3);

		Если КодОшибки = "403" Тогда
			ТекстОписанияКодаОшибки = 
				НСтр("ru = '403 Доступ запрещен. Проверьте адрес сервера, имя пользователя и пароль';
					 |en = '403 Forbidden. Check server address, user name and password'");

		ИначеЕсли КодОшибки = "404" Тогда
			ТекстОписанияКодаОшибки = 
				НСтр("ru = '404 Сервер не найден. Проверьте адрес сервера ';
					| en = '404 Server not found. Check server address'");

		ИначеЕсли КодОшибки = "409" Тогда
			ТекстОписанияКодаОшибки = 
				НСтр("ru = '409 Конфликт. Проверьте адрес сервера ';
					| en = '409 Conflict. Check server address'");

		ИначеЕсли КодОшибки = "500" Тогда
			ТекстОписанияКодаОшибки =
				НСтр("ru = '500 Внутренняя ошибка сервера. Попробуйте позже или обратитесь к администратору'; 
					 |en = '500 Internal server error. Try again later or contact the administrator'");

		ИначеЕсли КодОшибки = "503" Тогда
			ТекстОписанияКодаОшибки =
				НСтр("ru = '503 Сервис временно недоступен. Попробуйте позже или обратитесь к администратору'; 
					 |en = '503 Service Temporarily Unavailable. Try again later or contact the administrator'");

		Иначе
			ТекстОписанияКодаОшибки = 
				СтрШаблон(
					НСтр("ru = 'Сервер вернул код ошибки: %1'; en = 'Server return error code: %1'"),
					КодОшибки);
		КонецЕсли;

		ОбщееОписаниеОшибки = 
			НСтр("ru = '<b>Не удалось подключиться.</b>'; en = '<b>Can''t connect to server</b>'");

		ТекстОшибки = 
			РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
				ОбщееОписаниеОшибки, ПодробноеПредставлениеОшибки, ТекстОписанияКодаОшибки);

	Иначе
		ОбщееОписаниеОшибки = 
			НСтр("ru = '<b>Не удалось подключиться.</b>
				|1. Убедитесь, что правильно ввели адрес, логин и пароль.
				|2. Уточните у администратора, что на сервере включено использование мобильных клиентов.
				|3. Уточните у администратора наличие доступа к документообороту через web.
				|4. Уточните у администратора, что используемый сервер присутствует в списке разрешенных к использованию.
				|5. Уточните у администратора, что пользователю разрешено использование мобильных клиентов.
				|6. Проверьте, что работает интернет-соединение.
				|'; en = '<b>Can''t connect to server</b>
				|1. Check server addres, user name and password.
				|2. Check with administrator what mobile support on server is enabled
				|3. Check with administrator that servers have access to web
				|4. Check with administrator what specified server present in allow list for current user.
				|5. Check with administrator what specified user is allowed to use mobile clients.
				|6. Check internet connection.'");

		ТекстОшибки = 
			РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
				ОбщееОписаниеОшибки, ПодробноеПредставлениеОшибки, ТекстОписанияКодаОшибки);

	КонецЕсли;

	МоментВремени = РегистрыСведений.ПротоколСобытий.ДобавитьОшибку(ТекстОшибки);
	РегистрыСведений.ПротоколСобытий.УстановитьНеобходимостьОтображенияПослеСинхронизации(МоментВремени, Истина);

	Возврат ТекстОшибки;

КонецФункции 

#КонецОбласти