
#Область ПрограммныйИнтерфейс

// Определяет необходимость запуска обработчиков обновления.
// 
// Возвращаемое значение:
//  Булево - Признак того, что необходимо выполнить обновление ИБ.
//
Функция НеобходимоВыполнитьОбновление() Экспорт

	ВерсияИБ = Метаданные.Версия;

	Возврат НеобходимоЗапуститьОбработчик(ВерсияИБ);

КонецФункции

// Выполняет обновление ИБ.
//
// Параметры:
//  СтраницыЧтоНового		 - Массив - Массив имен страниц для показа в форме "Что нового";
//  ЕстьОшибкиПриОбновлении	 - Булево - Признак того, что обновление не выполнено.
//                                      В этом случае будет показана форма со списком ошибок.
//
Процедура ВыполнитьОбновлениеИБ(СтраницыЧтоНового, ЕстьОшибкиПриОбновлении) Экспорт

	Попытка
		ВыполнитьОбновление(СтраницыЧтоНового);
	Исключение

		Инфо = ИнформацияОбОшибке();

		ОбщееОписаниеОшибки = 
			НСтр("ru = 'При обновлении данных приложения на новую версию произошла ошибка.
				|<b>Для дальнейшей корректной работы необходима переустановка приложения и повторное подключение к серверу.</b>
				|'; en = 'An error occurred while updating program data.
				|<b> Perform reinstallation programm and reconnect to the server. </b>'");

		ТекстОшибки = 
			РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
				ОбщееОписаниеОшибки, ПодробноеПредставлениеОшибки(Инфо));

		МоментВремени = РегистрыСведений.ПротоколСобытий.ДобавитьОшибку(ТекстОшибки);

		РегистрыСведений.ПротоколСобытий.УстановитьНеобходимостьОтображенияПослеСинхронизации(МоментВремени, Истина);

		ЕстьОшибкиПриОбновлении = Истина;

	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет запуск необходимых обработчиков обновления, исходя из того, 
// на какую версию ранее уже производилось обновление.
//
Процедура ВыполнитьОбновление(СтраницыЧтоНового)

	Если Метаданные.Версия = Константы.ВерсияАренды.Получить() Тогда
		Возврат;
	КонецЕсли;

	ВерсияПриложения = "1.0.0.2";
	Если НеобходимоЗапуститьОбработчик(ВерсияПриложения) Тогда
		ПерейтиНаВерсию_1_0_0_2();
	КонецЕсли;

	Константы.ВерсияАренды.Установить(Метаданные.Версия);

КонецПроцедуры

// Проверяет необходимость запуска обработки обновления для указанной версии.
//
// Параметры:
//  ВерсияСравнения - Строка - Номер версии для которой нужно выполнить проверку.
// 
// Возвращаемое значение:
//  Истина - Если нужно запустить обработку обновления, Ложь в противном случае.
//
Функция НеобходимоЗапуститьОбработчик(ВерсияСравнения)

	ВерсияДокументооборота        = Константы.ВерсияАренды.Получить();
	РазрядыВерсииДокументооборота = СтрРазделить(ВерсияДокументооборота, ".");
	РазрядыВерсииСравнения        = СтрРазделить(ВерсияСравнения, ".");

	Если ВерсияДокументооборота = ВерсияСравнения Тогда
		Возврат Ложь;
	КонецЕсли;

	Для Счетчик = 1 По 4 Цикл
		
		ЛевоеЗначение  = Число(РазрядыВерсииДокументооборота[Счетчик - 1]);
		ПравоеЗначение = Число(РазрядыВерсииСравнения[Счетчик - 1]);
		
		Если ЛевоеЗначение = ПравоеЗначение Тогда
			Продолжить;

		ИначеЕсли ЛевоеЗначение < ПравоеЗначение Тогда
			Возврат Истина;

		Иначе
			Возврат Ложь;
		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции

// Записывает информацию о успешном обновлении на новую версию.
//
// Параметры:
//  Версия - Строка - новая версия программы.
//
Процедура ЗаписатьИнформациюОУспешномОбновленииНаНовуюВерсию(Версия)

	ТекстИнформации = СтрШаблон(
		НСтр("ru = 'Выполнен переход на версию %1'; en = 'Successfully updated to the version %1'"),
		Версия);

	РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(ТекстИнформации);
	СборСтатистикиКлиентСервер.СобратьДанныеСтатистикиПриОбновлении();

КонецПроцедуры

#Область ОбработчикиОбновления

Процедура ПерейтиНаВерсию_1_0_0_2()

	НачатьТранзакцию();

	Попытка
		Константы.ПоддерживаемыеВерсииФорматаОбмена.Установить("001");
		ЗаписатьИнформациюОУспешномОбновленииНаНовуюВерсию("1.0.0.2");
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ПерезаполнитьДатыАктуальностиПисем()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВходящееПисьмо.Ссылка КАК ПисьмоСсылка,
		|	ВходящееПисьмо.Дата
		|ИЗ
		|	Документ.ВходящееПисьмо КАК ВходящееПисьмо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИсходящееПисьмо.Ссылка,
		|	ИсходящееПисьмо.Дата
		|ИЗ
		|	Документ.ИсходящееПисьмо КАК ИсходящееПисьмо";
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		
		РегистрыСведений.ДатыЗагрузкиОбъектов.ОбновитьДатуПоследнегоИзмененияОбъекта(Выборка.ПисьмоСсылка, Выборка.Дата);
		
	КонецЦикла;
	
	РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(НСтр("ru = 'При переходе на версию 2.1.8.2 перезаполнены даты актуальности писем'; en = 'Due to 2.1.8.2 update dates of actuality were rewrited for incoming and outgoing letters'"));
		
КонецПроцедуры

Процедура ОчиститьСправочникАдресатов()

	Узел = ОбменВызовСервераПовтИсп.ПолучитьЦентральныйУзелОбмена();

	Выборка = Справочники.АдресатыПочтовыхСообщений.Выбрать();
	Пока Выборка.Следующий() Цикл

		Ссылка = Выборка.Ссылка;

		Адресат = Выборка.ПолучитьОбъект();
		Адресат.Удалить();

		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Ссылка);

	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьЗаменуСсылокАдресатовНаСтрокиВСправочнике(ИмяМетаданных)

	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбрабатываемыйСправочник.Ссылка,
		|	АдресатыПочтовыхСообщений.Адрес,
		|	АдресатыПочтовыхСообщений.Наименование 
		|ИЗ
		|	Справочник.%1 КАК ОбрабатываемыйСправочник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АдресатыПочтовыхСообщений КАК АдресатыПочтовыхСообщений
		|		ПО ОбрабатываемыйСправочник.Адресат = АдресатыПочтовыхСообщений.Ссылка";

	Запрос.Текст = СтрШаблон(Запрос.Текст, ИмяМетаданных);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		ЗаписатьАдресатаВРегистр(Выборка.Адрес, Выборка.Наименование);

		ЭлементОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЭлементОбъект.Адресат = Неопределено;
		ЭлементОбъект.Записать();

	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьЗаменуСсылокАдресатовНаСтрокиВДокументах(ИмяМетаданных)

	// Получаем письма которые на момент обновления изменены и не выгружены на сервер.
	Запрос = Новый Запрос();
	Запрос.Текст = СтрШаблон(
		"ВЫБРАТЬ
		|	ИзмененныеПисьма.Ссылка
		|ИЗ
		|	Документ.%1.Изменения КАК ИзмененныеПисьма", ИмяМетаданных);

	ИзмененныеОбъекты = Запрос.Выполнить().Выгрузить();
	Узел = ОбменВызовСервераПовтИсп.ПолучитьЦентральныйУзелОбмена();

	Выборка = Документы[ИмяМетаданных].Выбрать();
	Пока Выборка.Следующий() Цикл

		// Инициируем списки адресатов
		Кому    = Новый Массив();
		Копии   = Новый Массив();
		Скрытые = Новый Массив();
		
		// Получаем всех адресатов по выбранному объекту
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Выборка.Ссылка);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	АдресатыВПисьмах.Роль,
			|	АдресатыВПисьмах.Адресат,
			|	АдресатыПочтовыхСообщений.Наименование КАК Представление,
			|	АдресатыПочтовыхСообщений.Адрес
			|ИЗ
			|	РегистрСведений.АдресатыВПисьмах КАК АдресатыВПисьмах
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АдресатыПочтовыхСообщений КАК АдресатыПочтовыхСообщений
			|		ПО АдресатыВПисьмах.Адресат = АдресатыПочтовыхСообщений.Ссылка
			|ГДЕ
			|	АдресатыВПисьмах.Письмо = &Ссылка";

		// Перебираем адресатов
		Адресаты = Запрос.Выполнить().Выбрать();
		Пока Адресаты.Следующий() Цикл

			// Относим адресата в нужный список
			Если Адресаты.Роль = Перечисления.РолиАдресатовВПисьме.Получатель Тогда
				Кому.Добавить(Адресаты.Представление);

			ИначеЕсли Адресаты.Роль = Перечисления.РолиАдресатовВПисьме.ПолучательКопии Тогда
				Копии.Добавить(Адресаты.Представление);

			ИначеЕсли Адресаты.Роль = Перечисления.РолиАдресатовВПисьме.ПолучательСкрытойКопии Тогда
				Скрытые.Добавить(Адресаты.Представление);

			КонецЕсли;

			// Записываем уникального адресата в регистр
			ЗаписатьАдресатаВРегистр(Адресаты.Адрес, Адресаты.Представление);

		КонецЦикла;

		// Проверяем что письмо на момент обработки уже ждет выгрузку на сервер.
		ОбъектНеИзменен = ИзмененныеОбъекты.Найти(Выборка.Ссылка, "Ссылка") = Неопределено;

		// Изменяем письмо
		ПисьмоОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПисьмоОбъект.ПолучателиПисьма = СтрСоединить(Кому, ";");
		ПисьмоОбъект.ПолучателиКопий = СтрСоединить(Копии, ";");
		ПисьмоОбъект.ПолучателиСкрытыхКопий = СтрСоединить(Скрытые, ";");

		// Для входящих писем дополнительно преобразуем адресата
		Если СтрСравнить(ИмяМетаданных, "ВходящееПисьмо") = 0 Тогда
			ПисьмоОбъект.Отправитель = Строка(ПисьмоОбъект.ОтправительАдресат);
			ПисьмоОбъект.ОтправительАдресат = Неопределено;
		КонецЕсли;
		
		// Сохраняем изменения
		ПисьмоОбъект.Записать();

		// Если объект на момент изменения не ждет выгрузку - удаляем его регистрацию.
		Если ОбъектНеИзменен Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Выборка.Ссылка);
		КонецЕсли;

		// Удаляем записи по письму.
		Набор = РегистрыСведений.АдресатыВПисьмах.СоздатьНаборЗаписей();
		Набор.Отбор.Письмо.Установить(Выборка.Ссылка);
		Набор.Записать(Истина);

	КонецЦикла;

КонецПроцедуры

Процедура ЗаписатьАдресатаВРегистр(Адрес, Представление)

	Запись = РегистрыСведений.АдресатыПисем.СоздатьМенеджерЗаписи();
	Запись.Адресат = Адрес;
	Запись.Представление = Представление;
	Запись.Записать(Истина);

КонецПроцедуры

#КонецОбласти

#КонецОбласти
