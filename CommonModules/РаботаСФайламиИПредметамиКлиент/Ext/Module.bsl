
#Область ПрограммныйИнтерфейс

// Выполняет получение файла с сервера загруженного по ссылке.
//
// Параметры:
//  Представление	 - Строка - Представление файла;
//  СсылкаНаФайл	 - СправочникСсылка.Файлы - Ссылка на файл.
// 
// Возвращаемое значение:
//  Булево - Признак удачного окончания операции.
//
Функция ЗагрузитьФайлССервера(Представление, СсылкаНаФайл) Экспорт

	Результат = Ложь;

	ОбменВызовСервера.ОтправитьИПолучитьДанные(ТекущаяДата(), "ЗагрузитьФайлССервера", Ложь, СсылкаНаФайл);

	Если ОбменКлиент.НайтиИПоказатьОшибкиПриСинхронизации() Тогда
		Представление = Строка(СсылкаНаФайл);

	Иначе
		Результат = Истина;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Начинает процедуру обработки выбора вложения в форме.
//
// Параметры:
//  ЭтаФорма			 - Форма - Формы в которой произошел вызов;
//  ТекущиеДанные		 - СтрокаДереваЗначений - Выбранная строка дерева вложений;
//  СтандартнаяОбработка - Булево - Признак стандартной обработки.
//  ИспользоватьОбработчикФормы - Булево - Признак использования обработчика из формы.
//
Процедура ОбработатьВыборСтрокиВДеревеВложений(ЭтаФорма, ТекущиеДанные, 
	СтандартнаяОбработка, ИспользоватьОбработчикФормы = Ложь) ЭКспорт

	СтандартнаяОбработка = Ложь;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ВходящееПисьмо") 
		Или ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		ПоказатьЗначение(,ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ТолькоЗаголовок Тогда
		ЗадатьВопросОЗагрузкеФайла(
			ТекущиеДанные, ЭтаФорма, ИспользоватьОбработчикФормы);

	Иначе
		ОткрытьФайлНаКлиенте(ТекущиеДанные);

	КонецЕсли;

КонецПроцедуры

// Выполняет получение мультимедиа данных от устройства.
//
// Параметры:
//  ТипДанных - Строка- Идентификатор данных: "Фото", "Видео" или "Аудио".
// 
// Возвращаемое значение:
//  ДанныеМультимедиа или Строка - Полученные данные мультимедиа.
//
Функция ПолучитьМультимедиаДанные(ТипДанных) Экспорт

	Снимок = Неопределено;

	#Если МобильноеПриложениеКлиент Тогда

		Если ТипДанных = "Фото" 
			И СредстваМультимедиа.ПоддерживаетсяФотоснимок() Тогда
			Снимок = СредстваМультимедиа.СделатьФотоснимок();

		ИначеЕсли ТипДанных = "Видео" 
			И СредстваМультимедиа.ПоддерживаетсяВидеозапись() Тогда
			Снимок = СредстваМультимедиа.СделатьВидеозапись();

		ИначеЕсли ТипДанных = "Аудио" 
			И СредстваМультимедиа.ПоддерживаетсяАудиозапись() Тогда
			Снимок = СредстваМультимедиа.СделатьАудиозапись();

		КонецЕсли;

	#Иначе

		ФильтрДиалога    = НСтр("ru = 'Все файлы'; en = 'All files'") + "(*.*)|*.*";
		ЗаголовокДиалога = НСтр("ru = 'Выберите файл'; en = 'Choose the file'");

		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Заголовок          = ЗаголовокДиалога;
		ДиалогВыбораФайла.ПолноеИмяФайла     = "";
		ДиалогВыбораФайла.Фильтр             = ФильтрДиалога;
		ДиалогВыбораФайла.МножественныйВыбор = Ложь;

		Если ДиалогВыбораФайла.Выбрать() Тогда
			Снимок = ДиалогВыбораФайла.ПолноеИмяФайла;
		КонецЕсли;

	#КонецЕсли

	Возврат Снимок;

КонецФункции

// Возвращает структуру описание файла мультимедиа.
//
// Параметры:
//  Мультимедиа - ДанныеМультимедиа, Строка - Сведения о файле.
// 
// Возвращаемое значение:
//  Структура - Описание параметров файла мультимедиа.
//   * Ссылка               - УникальныйИдентификатор - Идентификатор нового файла;
//   * АдресВременногоФайла - Строка - Путь к файлу на диске;
//   * Тип                  - Строка - Тип файла (расширение);
//   * Размер               - Строка - Представление размера файла;
//   * ИндексКартинки       - Число  - Индекс картинки в коллекции КоллекцияСтрокПиктограммФайлов;
//   * Представление        - Строка - Представление файла (имя).
//
Функция ПолучитьПараметрыФайла(Мультимедиа) Экспорт

	Если Мультимедиа = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ТипЗнч(Мультимедиа) = Тип("Строка") Тогда

		Файл = Новый Файл(Мультимедиа);
		Если Не Файл.Существует() Тогда
			Возврат Неопределено;
		КонецЕсли;

		Расширение = Сред(Файл.Расширение, 2);
		РазмерДанных = Файл.Размер();
		ИмяВременногоФайла = Мультимедиа;

	Иначе

		Расширение = Мультимедиа.РасширениеФайла;
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);

		ДвоичныеДанные = Мультимедиа.ПолучитьДвоичныеДанные();
		ДвоичныеДанные.Записать(ИмяВременногоФайла);

		РазмерДанных = ДвоичныеДанные.Размер();

	КонецЕсли;

	РазмерФайла  = Формат(РазмерДанных / 1024, "ЧЦ=15; ЧГ=" ) + " кб";
	Наименование = Формат(ТекущаяДата(), "ДФ=yyyyMMddHHmmss") + "." + Расширение;
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("Ссылка", Новый УникальныйИдентификатор());
	ВозвращаемоеЗначение.Вставить("Представление", Наименование);
	ВозвращаемоеЗначение.Вставить("Тип", Расширение);
	ВозвращаемоеЗначение.Вставить("Размер", РазмерФайла);
	ВозвращаемоеЗначение.Вставить("АдресВременногоФайла", ИмяВременногоФайла);
	ВозвращаемоеЗначение.Вставить("ИндексКартинки",
		ОбщегоНазначенияКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение));

	Возврат ВозвращаемоеЗначение;

КонецФункции

// Открывает предмет.
//
// Параметры:
//  ЭтаФорма				    - Форма - Форма, откуда произошел вызов;
//  СтандартнаяОбработка	    - Булево - Признак стандартной обработки в форме;
//  Предмет					    - СправочникСсылка.Файлы - Ссылка на файл;
//  ИспользоватьОбработчикФормы - Булево - Признак использования обработчика из формы.
//
Процедура ОткрытьПредмет(ЭтаФорма, СтандартнаяОбработка, Предмет, ИспользоватьОбработчикФормы = Ложь) Экспорт

	СтандартнаяОбработка = Ложь;

	ПараметрыОткрытия = Новый Структура("Ключ", Предмет);

	Если ТипЗнч(Предмет) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда

		ОткрытьФорму("Документ.ВходящееПисьмо.Форма.ФормаВходящего", 
			ПараметрыОткрытия, ЭтаФорма,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда

		ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ФормаИсходящего", 
			ПараметрыОткрытия, ЭтаФорма,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Задачи") Тогда

		ОткрытьФорму("Справочник.Задачи.Форма.ФормаЗадачиТелефон", 
			ПараметрыОткрытия, ЭтаФорма,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.ПроцессыИсполнение") Тогда

		ОткрытьФорму("Справочник.ПроцессыИсполнение.Форма.ФормаПроцессаТелефон",
			ПараметрыОткрытия, ЭтаФорма,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.ПредметыПроцессов") Тогда

		ТекущиеДанные = 
			ОбщегоНазначенияВызовСервера.ЗначенияРеквизитовОбъекта(
				Предмет, "Ссылка");

		ОткрытьФайлНаКлиенте(ТекущиеДанные);

	ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Файлы") Тогда

		ТекущиеДанные = 
			ОбщегоНазначенияВызовСервера.ЗначенияРеквизитовОбъекта(
				Предмет, "ТолькоЗаголовок, Представление, Размер, Ссылка");

		Если ТекущиеДанные.ТолькоЗаголовок Тогда
			ЗадатьВопросОЗагрузкеФайла(ТекущиеДанные, ЭтаФорма, ИспользоватьОбработчикФормы);

		Иначе
			ОткрытьФайлНаКлиенте(ТекущиеДанные);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Показывает содержимое файла на устройстве.
//
// Параметры:
//  ИмяФайла - Строка - Имя запускаемого файла.
//
Процедура ЗапуститьПриложениеПоИмениФайла(ИмяФайла) Экспорт

	Файл = Новый Файл(ИмяФайла);

	Если ВРег(Файл.Расширение) = ".MXL" Тогда

		ТабличныйДокумент = ОбщегоНазначенияВызовСервера.ПолучитьТабличныйДокументИзФайлаНаСервере(ИмяФайла);
		ТабличныйДокумент.Показать(Файл.Имя);

		Возврат;

	ИначеЕсли ЗначениеЗаполнено(ИмяФайла) Тогда

		ЗапуститьПриложение(ИмяФайла);

		Возврат;

	КонецЕсли;

КонецПроцедуры

// Задает вопрос о загрузке файла.
//
// Параметры:
//  ТекущиеДанные	 - ДанныеФормыЭлементКоллекции - текущие данные строки дерева вложений.
//  ЭтаФорма		 - Форма - Форма в которой будет осуществлен вызов;
//  ИспользоватьОбработчикФормы - Булево - Признак использования обработчика из формы.
//
Процедура ЗадатьВопросОЗагрузкеФайла(ТекущиеДанные, ЭтаФорма, ИспользоватьОбработчикФормы = Ложь) Экспорт

	Если НЕ ТекущиеДанные.ТолькоЗаголовок Тогда
		Возврат;
	КонецЕсли;

	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДопПараметры.Вставить("ЭтаФорма", ЭтаФорма);

	ОбработчикВыбораПользователя = 
		ПолучитьОбработчикРешенияОЗагрузке(ЭтаФорма, ДопПараметры, ИспользоватьОбработчикФормы);

	ЗаголовокВопроса   = ПолучитьТекстЗаголовкаВопросаОЗагрузкеФайла();
	ТекстВопроса       = ПолучитьТекстВопросаОЗагрузкеФайла(ТекущиеДанные);
	ВариантыВыбора     = ПолучитьКнопкиВариантовЗагрузкиФайла();
	ВариантПоУмолчанию = КодВозвратаДиалога.Нет;

	ПоказатьВопрос(ОбработчикВыбораПользователя, ТекстВопроса, ВариантыВыбора, ,
		ВариантПоУмолчанию, ЗаголовокВопроса, );

КонецПроцедуры

// Начинает загрузку файла если пользователь согласился его загрузить.
//
// Параметры:
//  ОтветПользователя - КодВозвратаДиалога - Решение пользователя о загрузке файла;
//  ДопПараметры      - Произвольный - Доп параметры вызова метода.
//
Процедура ОбработатьРешениеВопросЗагрузкаФайла(ОтветПользователя, ДопПараметры) Экспорт

	Если ОтветПользователя = КодВозвратаДиалога.Таймаут 
	 Или ОтветПользователя = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма = ДопПараметры.ЭтаФорма;

	ДопПараметры.ТекущиеДанные.Представление = 
		УстановитьПредставлениеТекущейСтрокиПриЗагрузке(
			ДопПараметры.ТекущиеДанные.Ссылка);

	ЭтаФорма.ПодключитьОбработчикОжидания("ЗагрузитьИОткрытьТекущееВложение", 0.2, Истина);

КонецПроцедуры

// Выполняет открытие файла на устройстве.
//
// Параметры:
//  ТекущиеДанные - ДанныеФормыЭлементКоллекции - текущие данные строки дерева вложений.
//
Процедура ОткрытьФайлНаКлиенте(ТекущиеДанные) Экспорт

	Вложение = ТекущиеДанные.Ссылка;
	ИмяФайла = ОбщегоНазначенияВызовСервера.ПолучитьИмяВременногоФайлаДляВложения(Вложение);

	ЗапуститьПриложениеПоИмениФайла(ИмяФайла);

КонецПроцедуры

// Функция - Установить представление текущей строки при загрузке.
//
// Параметры:
//  Ссылка - Ссылка - Ссылка на загружаемый файл или предмет.
// 
// Возвращаемое значение:
//  Строка - представление файла во время загрузки с сервера.
//
Функция УстановитьПредставлениеТекущейСтрокиПриЗагрузке(Ссылка) Экспорт

	Возврат СтрШаблон("%1 %2",
			Строка(Ссылка),
			НСтр("ru = '(загрузка...)'; en = '(downloading...)'"));

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает кнопки вариантов загрузки файла.
// 
// Возвращаемое значение:
//  СписокЗначений - список вариантов для вопроса о загрузке файла.
//
Функция ПолучитьКнопкиВариантовЗагрузкиФайла()

	ВариантыВыбора = Новый СписокЗначений;

	ВариантыВыбора.Добавить(КодВозвратаДиалога.Да ,
		НСтр("ru = 'Загрузить'; en = 'Download'"));

	ВариантыВыбора.Добавить(КодВозвратаДиалога.Нет, 
		НСтр("ru = 'Не загружать'; en = 'Cancel'"));

	Возврат ВариантыВыбора;

КонецФункции

// Получить текст заголовка вопроса о загрузке файла.
// 
// Возвращаемое значение:
//  Строка - Текст заголовка к вопросу о загрузке файла.
//
Функция ПолучитьТекстЗаголовкаВопросаОЗагрузкеФайла()

	Возврат НСтр("ru = 'Загрузка файла'; en = 'Downloading file'");

КонецФункции

// Получить текст вопроса о загрузке файла.
//
// Параметры:
//  ТекущиеДанные - ДанныеФормыЭлементКоллекции - текущие данные строки дерева вложений.
// 
// Возвращаемое значение:
//  Строка - Текст вопроса о загрузке файла.
//
Функция ПолучитьТекстВопросаОЗагрузкеФайла(ТекущиеДанные)

	Возврат СтрШаблон(
				НСтр("ru = 'Загрузить файл ""%1"" размером %2?'; 
				|en = 'Download the file ""%1"" with a size of ""%2""?'"),
				ТекущиеДанные.Представление,
				ТекущиеДанные.Размер);

КонецФункции

// Получает обработчик решения о загрузке.
//
// Параметры:
//  Форма		 - Форма - Форма в которой будет вызван обработчик;
//  Параметры	 - Произвольный - Структура доп параметров для обработчика.
//  ИспользоватьОбработчикФормы - Булево - Признак использования обработчика из формы.
//
// Возвращаемое значение:
//  ОписаниеОповещения - Обработчик решения о загрузке файла.
//
Функция ПолучитьОбработчикРешенияОЗагрузке(Форма, Параметры, ИспользоватьОбработчикФормы = Ложь)

	Если ИспользоватьОбработчикФормы Тогда
		ТочкаОбработки = Форма;
	Иначе
		ТочкаОбработки = РаботаСФайламиИПредметамиКлиент;
	КонецЕсли;

	Возврат Новый ОписаниеОповещения("ОбработатьРешениеВопросЗагрузкаФайла", ТочкаОбработки, Параметры);

КонецФункции

#КонецОбласти
