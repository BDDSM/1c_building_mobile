
#Область ПрограммныйИнтерфейс

// Создает сообщение для подключения нового устройства.
//
// Параметры:
//  ВерсияСервиса - Строка - Версия используемого формата обмена.
//
Процедура СоздатьСообщениеДляПодключенияУстройства(ВерсияСервиса) Экспорт

	СброситьФлагНеобходимостиПоказаСтарыхПредупреждений();

	// Установим код устройства чтобы избежать чтения пакетов которые были подготовлены заранее,
	// но не загружены на устройство. Например, при начальной синхронизации произошел обрыв связи.
	
	ЦентральныйУзелОбмена = ПланыОбмена.ОбменССервером.НайтиПоКоду(Константы.КодУстройства.Получить());

	Если Не ЦентральныйУзелОбмена.Пустая() Тогда
		НовыйКодУстройства = Новый УникальныйИдентификатор();

		Константы.КодУстройства.Установить(НовыйКодУстройства);

		УзелОбъект = ЦентральныйУзелОбмена.ПолучитьОбъект();
		УзелОбъект.Код = НовыйКодУстройства;
		УзелОбъект.Записать();
	КонецЕсли;
	
	Сообщение = Неопределено;
	ОбменЭкспорт.СообщениеДляПодключенияУстройства(Сообщение);

	// Записываем сообщение 
	ВыполнитьЗаписьЭлементаОчередиСообщения(ВерсияСервиса, Сообщение);

КонецПроцедуры

// Создает сообщение для отключения устройства от базы на сервере.
//
// Параметры:
//  ВерсияСервиса - Строка - Версия используемого формата обмена.
//
Процедура СоздатьСообщениеДляОтключенияУстройства(ВерсияСервиса) Экспорт

	Сообщение = Неопределено;	
	ОбменЭкспорт.СообщениеДляОтключенияУстройства(Сообщение);

	ВыполнитьЗаписьЭлементаОчередиСообщения(ВерсияСервиса, Сообщение);

КонецПроцедуры

// Создает сообщение, в котором содержится выгрузка всех измененных на клиенте данных.
//
// Параметры:
//  ВерсияСервиса - Строка - Версия используемого формата обмена;
//  ЕстьНеотправленныеДанные - Булево - Признак наличия неотправленных данных.
//
Процедура СоздатьСообщениеДляВыгрузкиВсехИзмененныхДанных(ВерсияСервиса, 
	ЕстьНеотправленныеДанные) Экспорт 

	СброситьФлагНеобходимостиПоказаСтарыхПредупреждений();

	Сообщение = Неопределено;	
	ОбменЭкспорт.СообщениеДляВыгрузкиИзмененныхДанных(Сообщение);
	
КонецПроцедуры

// Создает сообщение для передачи сообщения о проблеме на сервер
//
// Параметры:
//  ВерсияСервиса - Строка - Версия используемого формата обмена;
//  Текст         - Строка - Текст сообщения о проблеме.
//
Процедура СоздатьСообщениеДляПередачиСообщенияОПроблеме(ВерсияСервиса, Текст) Экспорт

	Сообщение = Неопределено;
	ОбменЭкспорт.СообщениеДляПередачиДанныхПроблемах(Сообщение);

	ВыполнитьЗаписьЭлементаОчередиСообщения(ВерсияСервиса, Сообщение);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура - Выполнить запись элемента очереди сообщения
//
// Параметры:
//  ВерсияСервиса		    - Строка - Используемая версия обмена;
//  ИмяФайлаСообщенияОбмена - Строка - Имя сформированного файла с данными.
//
Процедура ВыполнитьЗаписьЭлементаОчередиСообщения(ВерсияСервиса, Сообщение) Экспорт

	СтрокаВЖурнал = НСтр("ru = 'Попытка записи элемента очереди сообщений обмена'; 
						 |en = 'Attempt to write down the message queue item'");

	РегистрыСведений.ПротоколСобытий.ДобавитьИнформацию(СтрокаВЖурнал);

	ДанныеОбмена = Новый ХранилищеЗначения(Сообщение, Новый СжатиеДанных(9));

	НовыйЭлементОчереди = РегистрыСведений.ОчередьСообщенийНаСервер.СоздатьМенеджерЗаписи();

	НовыйЭлементОчереди.Данные        = ДанныеОбмена;
	НовыйЭлементОчереди.МоментВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();
	НовыйЭлементОчереди.Идентификатор = Новый УникальныйИдентификатор();

	НовыйЭлементОчереди.Записать();

	РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(
		СтрШаблон(
			НСтр("ru = 'Записан элемент очереди сообщений для сервера (версия %1)'"), ВерсияСервиса));

КонецПроцедуры 

// Устанавливает признак необходимости показа еще не показанных ошибок в Ложь.
//
Процедура СброситьФлагНеобходимостиПоказаСтарыхПредупреждений()

	// Для всех сообщений которые еще не выведены сбрасываем флаг - они больше не нужны.
	СтруктураОтбора = Новый Структура("НеобходимоОтобразитьПослеСинхронизации", Истина);

	Выборка = РегистрыСведений.ПротоколСобытий.Выбрать(,, СтруктураОтбора);
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.ПротоколСобытий.УстановитьНеобходимостьОтображенияПослеСинхронизации(
			Выборка.МоментВремени, Ложь);
	КонецЦикла;

КонецПроцедуры 

// Процедура - Записать в поток обмена записи протокола
//
// Параметры:
//  ВерсияСервиса			   - Строка    - Используемая версия формата обмена;
//  ЗаписьXML				   - ЗаписьXML - Объект записи данных в файл;
// 
// Возвращаемое значение:
//  Булево - Истина, если записи протокола выгружены.
//
Функция ЗаписатьВПотокОбменаЗаписиПротокола(ВерсияСервиса, ЗаписьXML)

	ЕстьДанныеДляВыгрузки = Ложь;

	// Выходим, если нет необходимости передавать записи на сервер.
	Если Не Константы.ВыгружатьПротоколСобытийНаСервер.Получить() Тогда
		Возврат ЕстьДанныеДляВыгрузки;
	КонецЕсли;

	// Определяем границу переданных записей протокола.
	ГраницаВыборки = Константы.ПоследняяОтправленнаяНаСерверЗаписьПротокола.Получить();
	
	// Получаем еще не переданные записи протокола.
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ГраницаВыборки", ГраницаВыборки);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПротоколСобытий.Период,
		|	ПротоколСобытий.МоментВремени КАК МоментВремени
		|ИЗ
		|	РегистрСведений.ПротоколСобытий КАК ПротоколСобытий
		|ГДЕ
		|	ПротоколСобытий.МоментВремени > &ГраницаВыборки
		|
		|УПОРЯДОЧИТЬ ПО
		|	МоментВремени";

	ПротоколВыборка = Запрос.Выполнить().Выбрать();

	// Помещаем записи в файл
	Пока ПротоколВыборка.Следующий() Цикл

		НаборЗаписей = РегистрыСведений.ПротоколСобытий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ПротоколВыборка.Период);
		НаборЗаписей.Отбор.МоментВремени.Установить(ПротоколВыборка.МоментВремени);
		НаборЗаписей.Прочитать();

		Если ВерсияСервиса >= "206" Тогда

			ОбменФормированиеDMXСервер.ЗаписатьОбъектВXML(ЗаписьXML, ВерсияСервиса, НаборЗаписей);

		КонецЕсли;

		// Сдвигаем границу переданных данных вперед.
		ГраницаВыборки = ПротоколВыборка.МоментВремени;
		ЕстьДанныеДляВыгрузки = Истина;

	КонецЦикла;

	// Запоминаем границу переданных данных.
	Константы.ПоследняяОтправленнаяНаСерверЗаписьПротокола.Установить(ГраницаВыборки);

	Возврат ЕстьДанныеДляВыгрузки;

КонецФункции

// Записывает произошедшую ошибку в протокол и помечает ее как требующую показа после обмена.
//
// Параметры:
//  ЗаписьXML - ЗаписьXML - Объект записи данных в файл;
//  ИмяФайлаСообщенияОбмена	 - Строка - Имя файла, в который будут записаны данные;
//  Инфо					 - ИнформацияОбОшибке - Описание произошедшей ошибки.
//
Процедура ОбработатьОшибкуПриФормированиеВыгрузкиВсехИзмененныхДанных(Инфо) Экспорт

	ОбщееОписаниеОшибки = 
		НСтр("ru = 'При подготовке сообщения для сервера произошла ошибка.'
			|; en = 'An error occured while preparing message for server'");

	ТекстОшибки = 
		РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
				ОбщееОписаниеОшибки, ПодробноеПредставлениеОшибки(Инфо));

	МоментВремени = РегистрыСведений.ПротоколСобытий.ДобавитьОшибку(ТекстОшибки);
	РегистрыСведений.ПротоколСобытий.УстановитьНеобходимостьОтображенияПослеСинхронизации(
		МоментВремени, Истина);

КонецПроцедуры

#КонецОбласти

