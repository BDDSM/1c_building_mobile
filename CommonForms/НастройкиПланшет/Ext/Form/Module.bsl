
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ЗаполнитьСписокРазделов();

	Набор = Константы.СоздатьНабор();
	Набор.Прочитать();

	ЗначениеВРеквизитФормы(Набор, "НаборКонстант");

	Если Не ЭтоУстройствоСБольшимЭкраном() Тогда

		Элементы.НаборКонстантПоказыватьПредпросмотрВСпискеЗадач.Видимость = Ложь;
		Элементы.ДекорацияПредпросмотрЗадач.Видимость     = Ложь;

		Элементы.НаборКонстантПомечатьПисьмаПрочтеннымиПриПросмотреПериод.Видимость = Ложь;
		Элементы.НаборКонстантПоказыватьПредпросмотрВСпискеПисем.Видимость = Ложь;
		Элементы.ДекорацияПрочтениеПриПросмотре.Видимость = Ложь;
		Элементы.ДекорацияПредпросмотрПисем.Видимость     = Ложь;

	КонецЕсли;

	УстановитьВидимостьПодчиненныхЭлементов();

	ОбщегоНазначенияСервер.ЗаполнитьСписокКомандВРазделеСервис(КомандыСервис);
	ОбщегоНазначенияСервер.ЗаполнитьСписокКомандВРазделеПочта(КомандыСинхронизацииПапок);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ВыполненоПодключениеКЦентральнойБазе"
		Или ИмяСобытия = "ВыполненоПолноеУдаление" Тогда
		Закрыть();

	ИначеЕсли ИмяСобытия = "ИзмененРежимРаботыПриложения" Тогда
		ЗаполнитьСписокРазделов();

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧастиСписокРазделов

&НаКлиенте
Процедура СписокРазделовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура СписокРазделовПриАктивизацииСтроки(Элемент)

	ВыбраннаяСтрока = Элементы.СписокРазделов.ТекущиеДанные;

	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элементы.КолонкаСтраницы.ТекущаяСтраница = Элементы[ВыбраннаяСтрока.Раздел];

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаборКонстантРежимРаботыПриИзменении(Элемент)

	ЗаписатьОбъект();

	Оповестить("ИзмененРежимРаботыПриложения");

	ОбновитьИнтерфейс();

КонецПроцедуры


&НаКлиенте
Процедура НаборКонстантПоказыватьПредпросмотрВСпискеЗадачПриИзменении(Элемент)

	ЗаписатьОбъект();

КонецПроцедуры


&НаКлиенте
Процедура НаборКонстантХранитьЗаписиКалендаряВТечениеПериодаПриИзменении(Элемент)

	ЗаписатьОбъект();

	Оповестить("ИзмененПериодХраненияЗаписейКалендаря", НаборКонстант.ХранитьЗаписиКалендаряВТечениеПериода);

КонецПроцедуры


&НаКлиенте
Процедура НаборКонстантАдресЦентральнойБазыПриИзменении(Элемент)

	ЗаписатьОбъект();

КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантПользовательЦентральнойБазыПриИзменении(Элемент)

	ЗаписатьОбъект();

КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантПарольПользователяПриИзменении(Элемент)

	ЗаписатьОбъект();

КонецПроцедуры


&НаКлиенте
Процедура НаборКонстантИспользоватьФоновуюСинхронизациюПриИзменении(Элемент)

	Если НаборКонстант.ИспользоватьФоновуюСинхронизацию 
		И Не НаборКонстант.ОтправлятьДанныеСразу Тогда
		НаборКонстант.ОтправлятьДанныеСразу = Истина;
	КонецЕсли;

	ЗаписатьОбъект();
	УстановитьВидимостьПодчиненныхЭлементов();

КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантИспользоватьТолькоWiFiПриИзменении(Элемент)

	ЗаписатьОбъект();

КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантМаксимальныйРазмерФайлаПриИзменении(Элемент)

	ЗаписатьОбъект();

	ОбщегоНазначенияВызовСервера.ОтразитьФактИзмененияНастройкиМаксимальногоРазмераФайла();

	Оповестить("ПоявилисьНеотправленныеДанные");

КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантОтправлятьДанныеСразуПриИзменении(Элемент)

	ЗаписатьОбъект();

КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантВыгружатьПротоколСобытийНаСерверПриИзменении(Элемент)

	ЗаписатьОбъект();

КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантПодробнаяИнформацияВПротоколеПриИзменении(Элемент)

	ЗаписатьОбъект();

КонецПроцедуры



&НаКлиенте
Процедура НаборКонстантТекущаяУчетнаяЗаписьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОбработчикЗавершения = Новый ОписаниеОповещения("ВыборУчетнойЗаписиЗавершение", ЭтотОбъект);

	ДопПараметры = Новый Структура();

	ОткрытьФорму("Справочник.УчетныеЗаписи.ФормаВыбора", ДопПараметры, ЭтаФорма,,,, 
		ОбработчикЗавершения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантПодписьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОбработчикЗавершения = Новый ОписаниеОповещения("ВыборПодписиЗавершение", ЭтотОбъект);

	ДопПараметры = Новый Структура();

	ОткрытьФорму("Справочник.ШаблоныТекстовПисем.ФормаВыбора", ДопПараметры, ЭтаФорма,,,, 
		ОбработчикЗавершения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантПодписьПриОтветеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОбработчикЗавершения = Новый ОписаниеОповещения("ВыборПодписиПриОтветеЗавершение", ЭтотОбъект);

	ДопПараметры = Новый Структура();

	ОткрытьФорму("Справочник.ШаблоныТекстовПисем.ФормаВыбора", ДопПараметры, ЭтаФорма,,,, 
		ОбработчикЗавершения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантКоличествоСтрокТекстаПриИзменении(Элемент)

	ЗаписатьОбъект();

	Оповестить("ИзмененыНастройкиКоличествоСтрокТекстаПисем", НаборКонстант.КоличествоСтрокТекстаПисем);

КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантПодписьПриИзменении(Элемент)

	ЗаписатьОбъект();

	ОбщегоНазначенияВызовСервера.ОтразитьФактИзмененияНастроекПодписи();

	Оповестить("ПоявилисьНеотправленныеДанные");

КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантВключатьВложенияПриПересылкеПриИзменении(Элемент)

	ЗаписатьОбъект();

КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантПомечатьПрочтеннымиПриОткрытииПриИзменении(Элемент)

	ЗаписатьОбъект();

	Оповестить("ИзмененаНастройкаАвтоПрочтения");

КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантХранитьПисьмаВТечениеПериодаПриИзменении(Элемент)

	ЗаписатьОбъект();

	Оповестить("ИзмененПериодХранения", НаборКонстант.ХранитьПисьмаВТечениеПериода);

КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантТекущаяУчетнаяЗаписьПриИзменении(Элемент)

	ЗаписатьОбъект();

КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантПомечатьПисьмаПрочтеннымиПриПредПросмотреПериодПриИзменении(Элемент)

	ЗаписатьОбъект();

КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантПоказыватьПредпросмотрВСпискеПисемПриИзменении(Элемент)

	ЗаписатьОбъект();

КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантВключатьВложенияПриОтветеПриИзменении(Элемент)

	ЗаписатьОбъект();

КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантПоУмолчаниюОтвечатьВсемПриИзменении(Элемент)

	ЗаписатьОбъект();

КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантПодтверждатьУдалениеПриИзменении(Элемент)

	ЗаписатьОбъект();

КонецПроцедуры


&НаКлиенте
Процедура ИспользоватьЛокальныеУведомленияПриИзменении(Элемент)

	ЗаписатьОбъект();

	Если НаборКонстант.ИспользоватьЛокальныеУведомления Тогда
		ЛокальныеУведомленияКлиент.ОбновитьЛокальныеУведомленияНаУстройстве();
	Иначе
		ЛокальныеУведомленияКлиент.УдалитьВсеЛокальныеУведомленияНаКлиенте();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандыСинхронизацияПапокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОткрытьФорму("Справочник.ПапкиПисем.Форма.НастройкаСинхронизацииПапок");

КонецПроцедуры

&НаКлиенте
Процедура КомандыСервисВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ТекДанные = Элементы.КомандыСервис.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекДанные.Команда = "ОчиститьСтарые" Тогда

		ОбработкаКомандыОчиститьОтСтарыхДанных(Элемент);

	ИначеЕсли ТекДанные.Команда = "УдалитьВсе" Тогда

		ОбработкаКомандыУдалитьВсеДанные(Элемент);

	ИначеЕсли ТекДанные.Команда = "ОткрытьПротокол" Тогда

		ОбработкаКомандыОткрытьПротокол(Элемент);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантИспользоватьПарольПриИзменении(Элемент)
	
	// Пользователь включил режим использования пароля
	Если НаборКонстант.ИспользоватьПароль Тогда

		// Настраиваем параметры открытия формы
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("Команда", "НастроитьПароль");
		
		ОбработчикЗавершенияВводаPINКода = 
			Новый ОписаниеОповещения("ОбработчикЗавершенияВводаPinКода", ЭтаФорма);
			
		// Отображаем форму ввода пароля 
		ОткрытьФорму("ОбщаяФорма.ВводПароля", ПараметрыОткрытия,,,,, 
			ОбработчикЗавершенияВводаPINКода, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
	// Пользователь отключил режим использования пароля
	Иначе

		// Очищаем хэш пароля
		ОбщегоНазначенияВызовСервера.УстановитьЗначениеКонстанты("ХешПароля", 0);

		// Записываем изменения
		ЗаписатьОбъект();

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкаСинхронизацииПапок(Команда)

	ОткрытьФорму("Справочник.ПапкиПисем.Форма.НастройкаСинхронизацииПапок");

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыОчиститьОтСтарыхДанных(Команда)

	ОчисткаБазыДанныхВызовСервера.ВыполнитьОчисткуОтСтарыхДанных();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыУдалитьВсеДанные(Команда)

	ОчисткаБазыДанныхКлиент.НачатьОчисткуБазыДанных(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыОткрытьПротокол(Команда)

	ОткрытьФорму("РегистрСведений.ПротоколСобытий.Форма.ФормаСписка");

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокРазделов()

	ОбщегоНазначенияВызовСервера.ЗаполнитьСписокРазделовНастроек(СписокРазделов);

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()

	ЭтаФорма.Закрыть();

КонецПроцедуры

&НаСервере
Процедура ЗаписатьОбъект()

	Набор = РеквизитФормыВЗначение("НаборКонстант");
	Набор.Записать();

	ЗначениеВРеквизитФормы(Набор, "НаборКонстант");

	Модифицированность = Ложь;

	ОбновитьПовторноИспользуемыеЗначения();
	УстановитьВидимостьПодчиненныхЭлементов();

КонецПроцедуры

&НаКлиенте
Процедура ВыборУчетнойЗаписиЗавершение(Результат, ДопПараметры) Экспорт

	Если Не Результат = Неопределено Тогда

		НаборКонстант.ОсновнаяУчетнаяЗапись = Результат;

		ЗаписатьОбъект();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборПодписиЗавершение(Результат, ДопПараметры) Экспорт

	Если Не Результат = Неопределено Тогда

		НаборКонстант.ПодписьДляНовыхПисем = Результат;

		ЗаписатьОбъект();

		ОбщегоНазначенияВызовСервера.ОтразитьФактИзмененияНастроекПодписи();

		Оповестить("ПоявилисьНеотправленныеДанные");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборПодписиПриОтветеЗавершение(Результат, ДопПараметры) Экспорт

	Если Не Результат = Неопределено Тогда

		НаборКонстант.ПодписьПриОтветеИПересылке = Результат;

		ЗаписатьОбъект();

		ОбщегоНазначенияВызовСервера.ОтразитьФактИзмененияНастроекПодписи();

		Оповестить("ПоявилисьНеотправленныеДанные");

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПодчиненныхЭлементов()

	Элементы.НаборКонстантИспользоватьТолькоWiFi.Видимость = НаборКонстант.ИспользоватьФоновуюСинхронизацию;
	Элементы.ДекорацияИспользоватьТолькоWiFi.Видимость = НаборКонстант.ИспользоватьФоновуюСинхронизацию;

	Элементы.НаборКонстантОтправлятьДанныеСразу.Видимость = Не НаборКонстант.ИспользоватьФоновуюСинхронизацию;
	Элементы.ДекорацияОтправлятьДанныеСразу.Видимость =  Не НаборКонстант.ИспользоватьФоновуюСинхронизацию;

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗавершенияВводаPinКода(Результат, ДопПараметры) Экспорт

	Если Результат = Истина Тогда
		НаборКонстант.ИспользоватьПароль = Истина;
	Иначе
		НаборКонстант.ИспользоватьПароль = Ложь;
	КонецЕсли;

	// Записываем изменения
	ЗаписатьОбъект();

КонецПроцедуры 

#КонецОбласти
