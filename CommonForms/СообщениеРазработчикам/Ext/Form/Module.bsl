
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче 
	// параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	НайтиСоздатьУчетнуюЗаписьПолучателя();
	НайтиУчетнуюЗаписьОтправителя();
	ВыполнитьПервоначальноеЗаполнениеПисьма();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда

		ТекстПредупреждения = НСтр("ru = 'Нет ни одной учетной записи почты'; en = 'There is no e-mail account'");
		ТекстЗаголовка      = НСтр("ru = 'Сообщение разработчикам'; en = 'Message to developers'");

		ПоказатьПредупреждение( , ТекстПредупреждения, ,ТекстЗаголовка);

		Отказ = Истина;

	КонецЕсли;

	УстановитьЗаголовок();

	ПодключитьОбработчикОжидания("ПерейтиКТексту", 0.1, Истина);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТекстСообщенияОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОбработчикВыбораПользователя = 
		Новый ОписаниеОповещения("ОбработатьРешениеОчисткаТекста", ЭтаФорма, );

	ЗаголовокВопроса = НСтр("ru = 'Сообщение разработчикам'; en = 'Message to developers'");;
	ТекстВопроса     = НСтр("ru = 'Очистить текст?'; en = 'Clear the text'");
	ВариантыВыбора   = РежимДиалогаВопрос.ДаНет;

	ПоказатьВопрос(ОбработчикВыбораПользователя, ТекстВопроса, ВариантыВыбора, ,
		, ЗаголовокВопроса, );

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьТекстПротокола(Команда)

	ОбработчикВыбораПользователя = 
		Новый ОписаниеОповещения("ОбработатьРешениеДобавитьТекстПротокола", ЭтаФорма, );

	ЗаголовокВопроса = НСтр("ru = 'Добавление протокола'; en = 'Insert the protocol'");
	ТекстВопроса     = НСтр("ru = 'Что необходимо добавить?'; en = 'that it is necessary to add'");
	
	ВариантыВыбора = Новый СписокЗначений();
	ВариантыВыбора.Добавить("ВсеЗа7Дней", НСтр("ru = 'Последние 7 дней'; en = 'Last 7 days'"));
	ВариантыВыбора.Добавить("ВсеОшибки" , НСтр("ru = 'Все ошибки'; en = 'All errors'"));
	ВариантыВыбора.Добавить("ВсеСобытия", НСтр("ru = 'Все события'; en = 'All events'"));
	ВариантыВыбора.Добавить(КодВозвратаДиалога.Отмена);

	ПоказатьВопрос(ОбработчикВыбораПользователя, ТекстВопроса, ВариантыВыбора, ,
		, ЗаголовокВопроса, );

КонецПроцедуры

&НаКлиенте
Процедура СменитьУчетнуюЗаписьОтправки(Команда)

	ОбработчикЗавершения = Новый ОписаниеОповещения("СменитьУчетнуюЗаписьОтправкиЗавершение", ЭтотОбъект);

	ОткрытьФорму("Справочник.УчетныеЗаписи.ФормаВыбора",, ЭтаФорма,,,, 
		ОбработчикЗавершения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)

	ОбработчикВыбораПользователя = 
		Новый ОписаниеОповещения("ОбработатьРешениеОтправить", ЭтаФорма, );

	ЗаголовокВопроса = НСтр("ru = 'Сообщение разработчикам'; en = 'Message to developers'");;
	ТекстВопроса     = НСтр("ru = 'Отправить?'; en = 'Send?'");

	ВариантыВыбора = РежимДиалогаВопрос.ОКОтмена;
	ВариантПоУмолчанию = КодВозвратаДиалога.ОК;

	ПоказатьВопрос(ОбработчикВыбораПользователя, ТекстВопроса, ВариантыВыбора, ,
		ВариантПоУмолчанию, ЗаголовокВопроса, );

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НайтиСоздатьУчетнуюЗаписьПолучателя()

	// Получение учетной запись получателя
	Адрес = "v8@1c.ru";
	Нашли = Ложь;

	Выборка = Справочники.АдресатыПочтовыхСообщений.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НРег(Выборка.Адрес) = Адрес Тогда
			Кому = Выборка.Ссылка;
			Нашли = Истина;
		КонецЕсли;
	КонецЦикла;

	Если Не Нашли Тогда

		Адресат = Справочники.АдресатыПочтовыхСообщений.СоздатьЭлемент();

		Адресат.Адрес = Адрес;
		Адресат.Наименование = 
			СтрШаблон(
				НСтр("ru = '%1'; en = '%1'"), 
				Адрес);

		Адресат.Записать();

		Кому = Адресат.Ссылка;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НайтиУчетнуюЗаписьОтправителя()

	КоличествоУчетныхЗаписей = 0;
	УчетнаяЗапись = Константы.ОсновнаяУчетнаяЗапись.Получить();

	СтруктураОтбора = Новый Структура("МожетИспользоватьсяДляОтправки", Истина);
	Выборка = Справочники.УчетныеЗаписи.Выбрать(,,СтруктураОтбора);
	Пока Выборка.Следующий() Цикл

		Если Выборка.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;

		КоличествоУчетныхЗаписей = КоличествоУчетныхЗаписей + 1;

		Если КоличествоУчетныхЗаписей = 1 И Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
			УчетнаяЗапись = Выборка.Ссылка;
		КонецЕсли;

	КонецЦикла;

	Если КоличествоУчетныхЗаписей = 0 Тогда
		Элементы.ФормаОтправить.Доступность = Ложь;
		Элементы.СменитьУчетнуюЗаписьОтправки.Видимость = Ложь;
	КонецЕсли;

	Если КоличествоУчетныхЗаписей = 1 Тогда
		Элементы.СменитьУчетнуюЗаписьОтправки.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьПервоначальноеЗаполнениеПисьма()

	СисИнфо = Новый СистемнаяИнформация;

	ТекстСообщения = ТекстСообщения 
		+ Символы.ПС + Символы.ПС;

	ТекстСообщения = ТекстСообщения + Символы.ПС 
		+ СтрШаблон(
			НСтр("ru = 'Версия ОС: %1
				|Версия платформы: %2
				|Версия конфигурации: 1С:Аренда и управление недвижимостью %3'"),
			СисИнфо.ВерсияОС, СисИнфо.ВерсияПриложения,
			Константы.ВерсияАренды.Получить());

КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовок()

	Заголовок = СтрШаблон(
					НСтр("ru = 'Сообщение от %1'; en = 'Message at %1'"),
					Строка(УчетнаяЗапись));

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗавуалироватьПротокол(ТекстПротокола)

	Результат = "";
	НеЗаменяемыеСимволы = "0123456789 !""№;%:?*()_+-=/-,.\|~`"+Символы.ВК 
		+ Символы.ВТаб + Символы.НПП + Символы.ПС + Символы.ПФ + Символы.Таб;

	ВсегоСтрок = СтрЧислоСтрок(ТекстПротокола);
	Для Индекс = 1 По ВсегоСтрок Цикл

		СтрокаПротокола = СтрПолучитьСтроку(ТекстПротокола, Индекс);

		Если Не (СтрНачинаетсяС(СтрокаПротокола, "Изменено")
			 Или СтрНачинаетсяС(СтрокаПротокола, "Загружено")
			 Или СтрНачинаетсяС(СтрокаПротокола, "Входящее")) Тогда
			Результат = Результат + Символы.ПС + СтрокаПротокола;
			Продолжить;
		КонецЕсли;
		
		ПозицияКавычки = СтрНайти(СтрокаПротокола, """");
		Если ПозицияКавычки = 0 Тогда
			Продолжить;
		КонецЕсли;

		ПозицияКавычки  = ПозицияКавычки + 1;
		ПоследнийСимвол = СтрДлина(СтрокаПротокола) - 1;

		Для ИндексВСтроке = ПозицияКавычки По ПоследнийСимвол Цикл

			Символ = Сред(СтрокаПротокола, ИндексВСтроке, 1);
			Слово  = Сред(СтрокаПротокола, ИндексВСтроке, 4);
			Если Слово = " от " Тогда
				ИндексВСтроке = ИндексВСтроке + 3;
				Продолжить;
			КонецЕсли;

			Если СтрНайти(НеЗаменяемыеСимволы, Символ) = 0 Тогда
				Символ = "#";
			КонецЕсли;

			СтрокаПротокола = Лев(СтрокаПротокола, ИндексВСтроке-1) 
				+ Символ + Сред(СтрокаПротокола, ИндексВСтроке+1);

		КонецЦикла;

		Результат = Результат + Символы.ПС + СтрокаПротокола;

	КонецЦикла;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПерейтиКТексту()

	ТекущийЭлемент = Элементы.Тема;

КонецПроцедуры

&НаСервере
Процедура ОтправитьНаСервере(ПараметрыЗаписи)

	ОбъектПисьмо = Документы.ИсходящееПисьмо.СоздатьДокумент();
	ОбъектПисьмо.Дата = ТекущаяДата();

	ОбъектПисьмо.Тема           = ПараметрыЗаписи.Тема;
	ОбъектПисьмо.ТипОбъекта     = Перечисления.ТипыОбъектов.ИсходящиеПисьма;
	ОбъектПисьмо.Важность       = Перечисления.ВажностьПисем.Обычная;
	ОбъектПисьмо.ИндексВажности = 1;
	ОбъектПисьмо.ПодготовленоКОтправке = ТекущаяДата();
	ОбъектПисьмо.Папка                 = ПараметрыЗаписи.ОтКого.ПапкаИсходящие;
	ОбъектПисьмо.УчетнаяЗапись         = ПараметрыЗаписи.ОтКого;
	ОбъектПисьмо.ПолучателиСтрокой     = ПараметрыЗаписи.Кому;
	ОбъектПисьмо.Прочитан       = Истина;
	ОбъектПисьмо.ЕстьВложения   = Ложь;
	ОбъектПисьмо.ТекстХранилище = Новый ХранилищеЗначения(ПараметрыЗаписи.Текст, Новый СжатиеДанных(9));

	ОбъектПисьмо.ТекстКратко = ПараметрыЗаписи.Текст;

	ОбъектПисьмо.ТекстКратко = ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(ОбъектПисьмо.ТекстКратко);

	Получатели = Новый Массив();
	Получатели.Добавить(ПараметрыЗаписи.Кому);

	ОбъектПисьмо.ДополнительныеСвойства.Вставить("Получатели", Получатели);

	ОбъектПисьмо.Записать();

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОтправку()

	ПараметрыЗаписи = Новый Структура();
	ПараметрыЗаписи.Вставить("ОтКого", УчетнаяЗапись);
	ПараметрыЗаписи.Вставить("Кому"  , Кому);
	ПараметрыЗаписи.Вставить("Тема"  , Тема);
	ПараметрыЗаписи.Вставить("Текст" , ТекстСообщения);

	ОтправитьНаСервере(ПараметрыЗаписи);

	ЗаголовокПредупреждения = НСтр("ru = 'Сообщение разработчикам'; en = 'Message to developers'");;
	ТекстПредупреждения     = НСтр("ru = 'Сообщение отправлено'; en = 'Message sent'");

	ПоказатьПредупреждение( , ТекстПредупреждения, , ЗаголовокПредупреждения);

	Оповестить("ПоявилисьНеотправленныеДанные");

	Закрыть();

КонецПроцедуры


&НаКлиенте
Процедура СменитьУчетнуюЗаписьОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Не Результат = Неопределено Тогда

		УчетнаяЗапись= Результат;

		УстановитьЗаголовок();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРешениеДобавитьТекстПротокола(Результат, ДопПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Отмена 
	 Или Результат = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;

	Если Результат = "ВсеЗа7Дней" Тогда

		Условие  = НСтр("ru = 'Последние 7 дней'; en = 'Last 7 days'");
		Протокол = РаботаСПротоколомСобытийВызовСервера.ПолучитьТекстПротокола();

	ИначеЕсли Результат = "ВсеОшибки" Тогда

		Условие  = НСтр("ru = 'Все ошибки'; en = 'All errors'");
		Граница  = 365*24*60*60;
		Протокол = РаботаСПротоколомСобытийВызовСервера.ПолучитьТекстПротокола(Граница, Истина);

	Иначе

		Условие  = НСтр("ru = 'Все события'; en = 'All events'");
		Граница  = 365*24*60*60;
		Протокол = РаботаСПротоколомСобытийВызовСервера.ПолучитьТекстПротокола(Граница);

	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Протокол) Тогда
		Протокол = НСтр("ru = 'Нет записей'; en = 'Events not found'");
	КонецЕсли;
	
	Протокол = ЗавуалироватьПротокол(Протокол);

	ТекстСообщения = ТекстСообщения 
		+ Символы.ПС + Символы.ПС 
		+ СтрШаблон(
			НСтр("ru = 'Протокол событий: %1'; en = 'Event protocol: %1'"), Условие) + Символы.ПС 
		+ "_______________________________"+Символы.ПС 
		+ Протокол + Символы.ПС 
		+ НСтр("ru = 'Конец протокола'; en = 'End of protocol'");

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРешениеОчисткаТекста(Результат, ДопПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	Элементы.ТекстСообщения.ТекстРедактирования = "";

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРешениеНеЗаполненаТема(Результат, ДопПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет 
	 Или Результат = КодВозвратаДиалога.Таймаут Тогда
		ПодключитьОбработчикОжидания("ПерейтиКТексту", 0.1, Истина);
	Иначе
		ВыполнитьОтправку();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРешениеОтправить(Результат, ДопПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Отмена 
	 Или Результат = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Тема) Тогда

		ОбработчикВыбораПользователя = 
			Новый ОписаниеОповещения("ОбработатьРешениеНеЗаполненаТема", ЭтаФорма, );

		ЗаголовокВопроса = НСтр("ru = 'Сообщение разработчикам'; en = 'Message to developers'");;
		ТекстВопроса     = НСтр("ru = 'Не указана тема сообщения. Продолжить отправку?';
								|en = 'The subject isn't set. Continue?'");

		ВариантыВыбора = Новый СписокЗначений;
		ВариантыВыбора.Добавить(КодВозвратаДиалога.Да , НСтр("ru = 'Отправить'; en = 'Send'"));
		ВариантыВыбора.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не отправлять'; en = 'Cancel'"));

		ВариантПоУмолчанию = КодВозвратаДиалога.Нет;

		ПоказатьВопрос(ОбработчикВыбораПользователя, ТекстВопроса, ВариантыВыбора, ,
			ВариантПоУмолчанию, ЗаголовокВопроса, );

		Возврат;

	КонецЕсли;

	ВыполнитьОтправку();

КонецПроцедуры

#КонецОбласти

